[
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/index.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "index.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/index.ts",
    "name": "index.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 21,
    "size": 823,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/cli.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/cli.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/cli.ts",
    "name": "cli.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 207,
    "size": 5370,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Variable:src/cli.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 15,
    "endLine": 15,
    "isConstant": true,
    "scope": "module",
    "initializer": "process.argv.slice(2)"
  },
  {
    "nodeId": "Variable:src/cli.ts:command",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "command",
    "file": "src/cli.ts",
    "startLine": 15,
    "endLine": 17,
    "isConstant": true,
    "scope": "module",
    "initializer": "args[0]"
  },
  {
    "nodeId": "Function:src/cli.ts:main",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "main",
    "file": "src/cli.ts",
    "startLine": 18,
    "endLine": 21,
    "isAsync": true,
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Function:src/cli.ts:printUsage",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "printUsage",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Print usage information\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Function:src/cli.ts:analyzeProject",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "analyzeProject",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Analyze a TypeScript project\n */",
    "parameterCount": 1,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/cli.ts:analyzeProject:args",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/cli.ts:projectPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "projectPath",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.resolve(args[0])"
  },
  {
    "nodeId": "Variable:src/cli.ts:outputDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "outputDir",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1] ? path.resolve(args[1]) : path.join(process.cwd(), 'output')"
  },
  {
    "nodeId": "Variable:src/cli.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[0]"
  },
  {
    "nodeId": "Variable:src/cli.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    uri: process.env.NEO4J_URI,\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'password',\n    database: process.env.NEO4J_DATABASE\n  }"
  },
  {
    "nodeId": "Variable:src/cli.ts:config",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    rootDir: '',\n    outputDir: '',\n    codebaseId,\n    neo4j: neo4jConfig\n  }"
  },
  {
    "nodeId": "Variable:src/cli.ts:codeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codeGraph",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(config)"
  },
  {
    "nodeId": "Function:src/cli.ts:queryGraph",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "queryGraph",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Run a Cypher query against the Neo4j database\n */",
    "parameterCount": 1,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/cli.ts:queryGraph:args",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/cli.ts:cypherQuery",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "cypherQuery",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1]"
  },
  {
    "nodeId": "Variable:src/cli.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(cypherQuery, { codebaseId })"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/examples/analyze-project.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/examples/analyze-project.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/examples/analyze-project.ts",
    "name": "analyze-project.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 159,
    "size": 5132,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Function:src/examples/analyze-project.ts:main",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "main",
    "file": "src/examples/analyze-project.ts",
    "startLine": 11,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Example script that demonstrates how to use the TypeScript Code Graph system\n * to analyze a TypeScript project and import it into Neo4j.\n * \n * Usage:\n * ```\n * ts-node src/examples/analyze-project.ts /path/to/typescript/project\n * ```\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/examples/analyze-project.ts",
    "startLine": 12,
    "endLine": 14,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.argv.slice(2)"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:projectPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "projectPath",
    "file": "src/examples/analyze-project.ts",
    "startLine": 18,
    "endLine": 18,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.resolve(args[0])"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:outputDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "outputDir",
    "file": "src/examples/analyze-project.ts",
    "startLine": 19,
    "endLine": 20,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1] ? path.resolve(args[1]) : path.join(process.cwd(), 'output')"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/examples/analyze-project.ts",
    "startLine": 20,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[2] || path.basename(projectPath)"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.env.NEO4J_URI ? {\n    uri: process.env.NEO4J_URI,\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'password',\n    database: process.env.NEO4J_DATABASE\n  } : undefined"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:config",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    rootDir: projectPath,\n    outputDir,\n    codebaseId,\n    neo4j: neo4jConfig\n  }"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:codeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codeGraph",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(config)"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:nodeCountsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeCountsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH (n)\n        WHERE n.codebaseId = $codebaseId\n        RETURN labels(n) AS labels, count(n) AS count\n        ORDER BY count DESC\n      `, { codebaseId })"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:relCountsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relCountsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH ()-[r]->()\n        WHERE r.codebaseId = $codebaseId\n        RETURN type(r) AS type, count(r) AS count\n        ORDER BY count DESC\n      `, { codebaseId })"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:complexClassesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "complexClassesResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH (c:Class)-[:HAS_METHOD]->(m:Method)\n        WHERE c.codebaseId = $codebaseId\n        WITH c, count(m) AS methodCount\n        ORDER BY methodCount DESC\n        LIMIT 10\n        RETURN c.name AS className, methodCount\n      `, { codebaseId })"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:circularDepsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "circularDepsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH path = (a:File)-[:IMPORTS*]->(b:File)-[:IMPORTS*]->(a)\n        WHERE a.codebaseId = $codebaseId AND b.codebaseId = $codebaseId\n        RETURN a.path AS from, b.path AS to\n        LIMIT 10\n      `, { codebaseId })"
  },
  {
    "nodeId": "Variable:src/examples/analyze-project.ts:unusedExportsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "unusedExportsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH (f:File)-[:EXPORTS_LOCAL|EXPORTS_DEFAULT]->(e)\n        WHERE f.codebaseId = $codebaseId\n        AND NOT EXISTS((e)<-[:IMPORTS]-())\n        RETURN f.path AS file, e.name AS export\n        LIMIT 10\n      `, { codebaseId })"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/index.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/index.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/index.ts",
    "name": "index.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 300,
    "size": 8730,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/index.ts:Config",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Config",
    "file": "src/index.ts",
    "startLine": 14,
    "endLine": 21,
    "description": "/**\n * Configuration for the TypeScript codebase to Neo4j graph system\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 0,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "Class:src/index.ts:TSCodeGraph",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "TSCodeGraph",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Main class for the TypeScript codebase to Neo4j graph system\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 6,
    "propertyCount": 4,
    "isExported": false,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/index.ts:TSCodeGraph.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Config",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/index.ts:TSCodeGraph.parser",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "parser",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "TSParser",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/index.ts:TSCodeGraph.transformer",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "transformer",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "GraphTransformer",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/index.ts:TSCodeGraph.queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "QueryExecutor | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/index.ts:TSCodeGraph.process",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "process",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Process a TypeScript codebase and generate a Neo4j graph\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Variable:src/index.ts:tsFiles",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tsFiles",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.findTypeScriptFiles(this.config.rootDir)"
  },
  {
    "nodeId": "Variable:src/index.ts:parseResults",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parseResults",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[]"
  },
  {
    "nodeId": "Variable:src/index.ts:parseStart",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parseStart",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "performance.now()"
  },
  {
    "nodeId": "Variable:src/index.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await this.queryExecutor.executeQuery(`\n        MATCH (n)\n        RETURN labels(n) AS labels, count(n) AS count\n        ORDER BY count DESC\n      `)"
  },
  {
    "nodeId": "Variable:src/index.ts:transformStart",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformStart",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "performance.now()"
  },
  {
    "nodeId": "Variable:src/index.ts:transformResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformResult",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.transformer.transform(parseResults)"
  },
  {
    "nodeId": "Variable:src/index.ts:isValid",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isValid",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.transformer.validate(transformResult)"
  },
  {
    "nodeId": "Variable:src/index.ts:{ nodes, relationships }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ nodes, relationships }",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "transformResult"
  },
  {
    "nodeId": "Method:src/index.ts:TSCodeGraph.findTypeScriptFiles",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findTypeScriptFiles",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Find all TypeScript files in a directory\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/index.ts:findTypeScriptFiles:dir",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "dir",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/index.ts:files",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "files",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "Variable:src/index.ts:walk",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "walk",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "(directory: string) => {\n      const entries = fs.readdirSync(directory, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(directory, entry.name);\n        \n        if (entry.isDirectory()) {\n          // Skip node_modules and other common directories to ignore\n          if (entry.name !== 'node_modules' && entry.name !== 'dist' && !entry.name.startsWith('.')) {\n            walk(fullPath);\n          }\n        } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.tsx'))) {\n          // Skip declaration files\n          if (!entry.name.endsWith('.d.ts')) {\n            files.push(fullPath);\n          }\n        }\n      }\n    }"
  },
  {
    "nodeId": "Variable:src/index.ts:entries",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "entries",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.readdirSync(directory, { withFileTypes: true })"
  },
  {
    "nodeId": "Variable:src/index.ts:fullPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fullPath",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(directory, entry.name)"
  },
  {
    "nodeId": "Method:src/index.ts:TSCodeGraph.saveResults",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "saveResults",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Save the extracted nodes and relationships to files\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/index.ts:saveResults:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/index.ts:saveResults:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/index.ts:nodesPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodesPath",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(this.config.outputDir, 'nodes.json')"
  },
  {
    "nodeId": "Variable:src/index.ts:relationshipsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsPath",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(this.config.outputDir, 'relationships.json')"
  },
  {
    "nodeId": "Method:src/index.ts:TSCodeGraph.importToNeo4j",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importToNeo4j",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import the extracted nodes and relationships to Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/index.ts:importToNeo4j:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/index.ts:importToNeo4j:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/index.ts:importer",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importer",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Neo4jImporter({\n      uri: this.config.neo4j.uri,\n      username: this.config.neo4j.username,\n      password: this.config.neo4j.password,\n      database: this.config.neo4j.database,\n      batchSize: 500 // Smaller batch size for better progress feedback\n    })"
  },
  {
    "nodeId": "Method:src/index.ts:TSCodeGraph.executeQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeQuery",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query against the Neo4j database\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/index.ts:executeQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/index.ts:executeQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/index.ts:TSCodeGraph.close",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "close",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Close all connections\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Function:src/index.ts:main",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "main",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Command-line interface for the TypeScript codebase to Neo4j graph system\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Variable:src/index.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.argv.slice(2)"
  },
  {
    "nodeId": "Variable:src/index.ts:rootDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "rootDir",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.resolve(args[0])"
  },
  {
    "nodeId": "Variable:src/index.ts:outputDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "outputDir",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1] ? path.resolve(args[1]) : path.join(process.cwd(), 'output')"
  },
  {
    "nodeId": "Variable:src/index.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[2] || path.basename(rootDir)"
  },
  {
    "nodeId": "Variable:src/index.ts:config",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Config",
    "initializer": "{\n    rootDir,\n    outputDir,\n    codebaseId\n  }"
  },
  {
    "nodeId": "Variable:src/index.ts:codeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codeGraph",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(config)"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/neo4j/importer.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/importer.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/importer.ts",
    "name": "importer.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 359,
    "size": 10326,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/neo4j/importer.ts:Neo4jImporterConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Neo4jImporterConfig",
    "file": "src/neo4j/importer.ts",
    "startLine": 12,
    "endLine": 21,
    "description": "/**\n * Configuration for the Neo4j importer\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Class:src/neo4j/importer.ts:Neo4jImporter",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "Neo4jImporter",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Importer for Neo4j graph database\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 11,
    "propertyCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/neo4j/importer.ts:Neo4jImporter.driver",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "driver",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Driver",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/neo4j/importer.ts:Neo4jImporter.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Neo4jImporterConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.import",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "import",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Import nodes and relationships into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:import:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:import:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:session",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:verifySession",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "verifySession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:verified",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "verified",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await verifySchemaConstraints(verifySession)"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:migrationSession",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "migrationSession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:migrationNeeded",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "migrationNeeded",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await SchemaMigration.isMigrationNeeded(migrationSession)"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:migrationResults",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "migrationResults",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await SchemaMigration.migrateAllToCurrentVersion(migrationSession)"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodes[0].codebaseId"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:codebaseSession",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseSession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.importNodes",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importNodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import nodes into Neo4j in batches\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:importNodes:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:batchSize",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batchSize",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.config.batchSize || 1000"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:batches",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batches",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Math.ceil(relationships.length / batchSize)"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:start",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "start",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "i * batchSize"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:end",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "end",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Math.min(start + batchSize, relationships.length)"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:batch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batch",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationships.slice(start, end)"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.importNodeBatch",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importNodeBatch",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import a batch of nodes into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:importNodeBatch:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(query, {\n          relationships: rels.map(rel => this.prepareRelationshipForImport(rel))\n        })"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:count",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "count",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records[0].get('count').toNumber()"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.importRelationships",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importRelationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import relationships into Neo4j in batches\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:importRelationships:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.importRelationshipBatch",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importRelationshipBatch",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import a batch of relationships into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:importRelationshipBatch:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:relationshipsByType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsByType",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.groupRelationshipsByType(relationships)"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:totalCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "totalCount",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:query",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "query",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n          UNWIND $relationships AS rel\n          MATCH (start:Node {nodeId: rel.startNodeId})\n          MATCH (end:Node {nodeId: rel.endNodeId})\n          MERGE (start)-[r:\\`${relType}\\`]->(end)\n          ON CREATE SET r = rel.properties, r.nodeId = rel.nodeId\n          ON MATCH SET r = rel.properties\n          RETURN count(r) AS count\n        `"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.groupRelationshipsByType",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "groupRelationshipsByType",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Group relationships by type for batch processing\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:groupRelationshipsByType:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:groups",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "groups",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, Relationship[]>",
    "initializer": "{}"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.prepareNodeForImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "prepareNodeForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Prepare a node for import into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:prepareNodeForImport:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:{ labels: originalLabels, ...nodeProperties }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ labels: originalLabels, ...nodeProperties }",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:labels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labels",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[...originalLabels]"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:nodeWithVersion",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeWithVersion",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      ...nodeProperties,\n      _schemaVersion: SCHEMA_VERSION,\n      _labels: labels\n    }"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.prepareRelationshipForImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "prepareRelationshipForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Prepare a relationship for import into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/importer.ts:prepareRelationshipForImport:relationship",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationship",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:relForImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...relationship }"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:{ type, startNodeId, endNodeId, ...properties }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ type, startNodeId, endNodeId, ...properties }",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relForImport"
  },
  {
    "nodeId": "Variable:src/neo4j/importer.ts:propertiesWithVersion",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propertiesWithVersion",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      ...properties,\n      _schemaVersion: SCHEMA_VERSION\n    }"
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.getLabelsParam",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getLabelsParam",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get a Cypher parameter for setting labels\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.getSession",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getSession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get a Neo4j session\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Method:src/neo4j/importer.ts:Neo4jImporter.close",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "close",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Close the Neo4j driver\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/neo4j/query-executor.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/query-executor.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/query-executor.ts",
    "name": "query-executor.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 367,
    "size": 8863,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/neo4j/query-executor.ts:QueryResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "QueryResult",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 4,
    "endLine": 21,
    "description": "/**\n * Result of a Neo4j query\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/neo4j/query-executor.ts:QueryExecutorConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "QueryExecutorConfig",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Configuration for the Neo4j query executor\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Class:src/neo4j/query-executor.ts:QueryExecutor",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "QueryExecutor",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Executor for Neo4j Cypher queries\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 6,
    "propertyCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/neo4j/query-executor.ts:QueryExecutor.driver",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "driver",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Driver",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/neo4j/query-executor.ts:QueryExecutor.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "QueryExecutorConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/neo4j/query-executor.ts:QueryExecutor.executeQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeQuery",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": true,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:executeQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:executeQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:executeQuery:timeout",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "timeout",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": true,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:session",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:startTime",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "startTime",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Date.now()"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:txConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "txConfig",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n        timeout: timeout || this.config.defaultTimeout\n      }"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, any>",
    "initializer": "{}"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:executionTime",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "executionTime",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Date.now() - startTime"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:records",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "records",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records.map(record => this.recordToObject(record))"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:stats",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "stats",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.summary.counters.updates()"
  },
  {
    "nodeId": "Method:src/neo4j/query-executor.ts:QueryExecutor.executeTransaction",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeTransaction",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query in a transaction\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": true,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:executeTransaction:queries",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "queries",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "{ cypher: string; parameters?: Record<string, any> }[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:executeTransaction:timeout",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "timeout",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": true,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:results",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "results",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "QueryResult[]",
    "initializer": "[]"
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:tx",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tx",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "session.beginTransaction(txConfig)"
  },
  {
    "nodeId": "Method:src/neo4j/query-executor.ts:QueryExecutor.recordToObject",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "recordToObject",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Convert a Neo4j record to a plain object\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:recordToObject:record",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "record",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Neo4jRecord",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/query-executor.ts:value",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "value",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get(key)"
  },
  {
    "nodeId": "Method:src/neo4j/query-executor.ts:QueryExecutor.convertNeo4jValue",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "convertNeo4jValue",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Convert a Neo4j value to a plain JavaScript value\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/query-executor.ts:convertNeo4jValue:value",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "value",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/neo4j/query-executor.ts:QueryExecutor.getSession",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getSession",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get a Neo4j session\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Method:src/neo4j/query-executor.ts:QueryExecutor.close",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "close",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Close the Neo4j driver\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/neo4j/schema-constraints.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/schema-constraints.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/schema-constraints.ts",
    "name": "schema-constraints.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 299,
    "size": 11280,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Function:src/neo4j/schema-constraints.ts:createSchemaConstraints",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "createSchemaConstraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 5,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Creates Neo4j schema constraints and indexes for the TypeScript code graph\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:createSchemaConstraints:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 9,
    "endLine": 9,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:query",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "query",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n          CALL db.index.fulltext.createNodeIndex(\n            '${ftIndex.name}',\n            [${ftIndex.labels.map(label => `'${label}'`).join(', ')}],\n            [${ftIndex.properties.map(prop => `'${prop}'`).join(', ')}]\n          )\n        `"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:fullTextIndexAvailable",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fullTextIndexAvailable",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:proceduresResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "proceduresResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(\"CALL dbms.procedures() YIELD name WHERE name = 'db.index.fulltext.createNodeIndex' RETURN count(*) > 0 as available\")"
  },
  {
    "nodeId": "Function:src/neo4j/schema-constraints.ts:dropSchemaConstraints",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "dropSchemaConstraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Drops all Neo4j schema constraints and indexes for the TypeScript code graph\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:dropSchemaConstraints:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:constraintsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraintsResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run('SHOW CONSTRAINTS')"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:name",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "name",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get('name')"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:indexesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "indexesResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run('SHOW INDEXES')"
  },
  {
    "nodeId": "Function:src/neo4j/schema-constraints.ts:createCodebaseSchema",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "createCodebaseSchema",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Creates Neo4j schema constraints and indexes for a specific codebase\n */",
    "parameterCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:createCodebaseSchema:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:createCodebaseSchema:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:commonNodeTypes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "commonNodeTypes",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "['File', 'Class', 'Function', 'Variable', 'Component']"
  },
  {
    "nodeId": "Function:src/neo4j/schema-constraints.ts:dropCodebaseSchema",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "dropCodebaseSchema",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Drops Neo4j schema constraints and indexes for a specific codebase\n */",
    "parameterCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:dropCodebaseSchema:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:dropCodebaseSchema:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:labelsAndProperties",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labelsAndProperties",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get('labelsOrTypes') + '.' + record.get('properties')"
  },
  {
    "nodeId": "Function:src/neo4j/schema-constraints.ts:verifySchemaConstraints",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "verifySchemaConstraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Verifies that the Neo4j schema constraints and indexes are correctly set up\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-constraints.ts:verifySchemaConstraints:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:sampleRecord",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sampleRecord",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintsResult.records[0]"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:constraints",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintsResult.records.map(record => ({\n      name: record.get('name'),\n      label: record.get('labelsOrTypes'),\n      property: record.get('properties'),\n      type: record.get('type')\n    }))"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:indexes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "indexes",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "indexesResult.records.map(record => ({\n      name: record.get('name'),\n      label: record.get('labelsOrTypes'),\n      property: record.get('properties'),\n      type: record.get('type')\n    }))"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:found",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "found",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "indexes.some(index =>\n          index.name === requiredFTIndex.name &&\n          index.type.includes('FULLTEXT')\n        )"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:constraintLabel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraintLabel",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Array.isArray(constraint.label) ? constraint.label[0] : constraint.label"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:constraintProperty",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraintProperty",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Array.isArray(constraint.property) ? constraint.property[0] : constraint.property"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:labelMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labelMatch",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintLabel === requiredConstraint.label"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:propertyMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propertyMatch",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintProperty === requiredConstraint.property"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-constraints.ts:typeMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeMatch",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraint.type === requiredConstraint.type"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/neo4j/schema-migration.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/schema-migration.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/schema-migration.ts",
    "name": "schema-migration.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 229,
    "size": 6995,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/neo4j/schema-migration.ts:SchemaMigrationConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "SchemaMigrationConfig",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 5,
    "endLine": 12,
    "description": "/**\n * Schema migration configuration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/neo4j/schema-migration.ts:MigrationResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "MigrationResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 12,
    "endLine": 20,
    "description": "/**\n * Schema migration result\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Class:src/neo4j/schema-migration.ts:SchemaMigration",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "SchemaMigration",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Handles schema migrations between different versions\n */",
    "isGeneric": false,
    "hasConstructor": false,
    "methodCount": 5,
    "propertyCount": 0,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/neo4j/schema-migration.ts:SchemaMigration.isMigrationNeeded",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isMigrationNeeded",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Check if schema migration is needed\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:isMigrationNeeded:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await this.migrateSchema(session, version)"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:count",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "count",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records[0].get('count').toNumber()"
  },
  {
    "nodeId": "Method:src/neo4j/schema-migration.ts:SchemaMigration.getCurrentVersions",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getCurrentVersions",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Get current schema versions in the database\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:getCurrentVersions:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/neo4j/schema-migration.ts:SchemaMigration.migrateSchema",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "migrateSchema",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Migrate schema from one version to another\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:migrateSchema:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:migrateSchema:fromVersion",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fromVersion",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:migrateSchema:toVersion",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "toVersion",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "initializer": "SCHEMA_VERSION",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:tx",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tx",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "session.beginTransaction()"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:nodesMigrated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodesMigrated",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:relationshipsMigrated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsMigrated",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:nodeLabelResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeLabelResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH (n)\n            WHERE n._schemaVersion = $fromVersion\n              AND (n:Class OR n:Interface OR n:Function OR n:Method OR n:Property OR n:Variable OR n:Parameter)\n              AND NOT n:CodeElement\n            SET n:CodeElement, n._schemaVersion = $toVersion, n.updatedAt = datetime()\n            RETURN count(n) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:relResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH ()-[r]->()\n            WHERE r._schemaVersion = $fromVersion\n            SET r._schemaVersion = $toVersion, r.updatedAt = datetime()\n            RETURN count(r) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:remainingNodesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "remainingNodesResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH (n)\n            WHERE n._schemaVersion = $fromVersion\n            SET n._schemaVersion = $toVersion, n.updatedAt = datetime()\n            RETURN count(n) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:nodeResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH (n)\n            WHERE n._schemaVersion = $fromVersion\n            SET n._schemaVersion = $toVersion, n.updatedAt = datetime()\n            RETURN count(n) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "Method:src/neo4j/schema-migration.ts:SchemaMigration.migrateAllToCurrentVersion",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "migrateAllToCurrentVersion",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Migrate all schema versions to the current version\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:migrateAllToCurrentVersion:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:versions",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "versions",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await this.getCurrentVersions(session)"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:results",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "results",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "MigrationResult[]",
    "initializer": "[]"
  },
  {
    "nodeId": "Method:src/neo4j/schema-migration.ts:SchemaMigration.createBackup",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "createBackup",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Create a backup of the database before migration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:createBackup:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/neo4j/schema-migration.ts:createBackup:backupName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "backupName",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:timestamp",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "timestamp",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Date().toISOString().replace(/[:.]/g, '-')"
  },
  {
    "nodeId": "Variable:src/neo4j/schema-migration.ts:backupFileName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "backupFileName",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`${backupName}_${timestamp}`"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/parser/ts-parser.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/parser/ts-parser.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/parser/ts-parser.ts",
    "name": "ts-parser.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 850,
    "size": 30791,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/parser/ts-parser.ts:TSParserOptions",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TSParserOptions",
    "file": "src/parser/ts-parser.ts",
    "startLine": 12,
    "endLine": 19,
    "description": "/**\n * Configuration options for the TypeScript parser\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/parser/ts-parser.ts:ParseResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ParseResult",
    "file": "src/parser/ts-parser.ts",
    "startLine": 20,
    "endLine": 21,
    "description": "/**\n * Result of parsing a TypeScript file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Class:src/parser/ts-parser.ts:TSParser",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "TSParser",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Parser for TypeScript files using the TypeScript Compiler API\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 23,
    "propertyCount": 5,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/parser/ts-parser.ts:TSParser.rootDir",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "rootDir",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "string",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/parser/ts-parser.ts:TSParser.codebaseId",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "string",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/parser/ts-parser.ts:TSParser.compilerOptions",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "compilerOptions",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "ts.CompilerOptions",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/parser/ts-parser.ts:TSParser.program",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "program",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "ts.Program | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/parser/ts-parser.ts:TSParser.typeChecker",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "typeChecker",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "ts.TypeChecker | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.initialize",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "initialize",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Initialize the TypeScript program and type checker\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:initialize:filePaths",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePaths",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.parseFile",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Parse a TypeScript file and extract nodes and relationships\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:parseFile:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:sourceFile",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sourceFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.program.getSourceFile(this.program.getRootFileNames()[0])"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ParseResult",
    "initializer": "{\n      nodes: [],\n      relationships: []\n    }"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:fileNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "File",
    "initializer": "{\n      nodeId: this.generateNodeId('File', filePath),\n      codebaseId: this.codebaseId,\n      labels: ['File'],\n      path: path.relative(this.rootDir, filePath),\n      absolutePath: filePath,\n      name: path.basename(filePath),\n      extension: path.extname(filePath).substring(1),\n      language: 'typescript',\n      lineCount: sourceFile.getLineAndCharacterOfPosition(sourceFile.end).line + 1,\n      size: this.getFileSize(filePath),\n      hasDefaultExport: this.hasDefaultExport(sourceFile),\n      defaultExportExpression: this.getDefaultExportExpression(sourceFile),\n      hasNamedExports: false, // Will need to be updated with actual logic\n      namedExports: [],\n      hasCommonJSExport: false, // Will need to be updated with actual logic\n      importCount: 0, // Will need to be updated with actual logic\n      exportCount: 0 // Will need to be updated with actual logic\n    }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.visitNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "visitNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Visit a TypeScript AST node and extract information\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:visitNode:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:visitNode:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:visitNode:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractClass",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractClass",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract class information from a class declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractClass:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.ClassDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractClass:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractClass:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:name",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "name",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "param.name.getText()"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:classNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "classNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Class",
    "initializer": "{\n      nodeId: this.generateNodeId('Class', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Class'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isAbstract: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AbstractKeyword) || false,\n      description: this.getJsDocComment(node),\n      isGeneric: !!node.typeParameters && node.typeParameters.length > 0,\n      hasConstructor: node.members.some(m => ts.isConstructorDeclaration(m)),\n      methodCount: node.members.filter(m => ts.isMethodDeclaration(m)).length,\n      propertyCount: node.members.filter(m => ts.isPropertyDeclaration(m)).length,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false,\n      hasDecorators: false // Simplified implementation\n    }"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:baseClassName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "baseClassName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "type.expression.getText()"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:interfaceName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "interfaceName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "type.expression.getText()"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractInterface",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractInterface",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract interface information from an interface declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractInterface:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.InterfaceDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractInterface:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractInterface:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:interfaceNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "interfaceNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Interface",
    "initializer": "{\n      nodeId: this.generateNodeId('Interface', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Interface'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      description: this.getJsDocComment(node),\n      isGeneric: !!node.typeParameters && node.typeParameters.length > 0,\n      methodCount: node.members.filter(m => ts.isMethodSignature(m)).length,\n      propertyCount: node.members.filter(m => ts.isPropertySignature(m)).length,\n      extendsCount: node.heritageClauses?.filter(h => h.token === ts.SyntaxKind.ExtendsKeyword).length || 0,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false\n    }"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:baseInterfaceName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "baseInterfaceName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "type.expression.getText()"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractTypeAlias",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractTypeAlias",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract type alias information from a type alias declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractTypeAlias:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.TypeAliasDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractTypeAlias:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractTypeAlias:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:typeAliasNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeAliasNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "TypeAlias",
    "initializer": "{\n      nodeId: this.generateNodeId('TypeAlias', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['TypeAlias'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      definition: node.type.getText(),\n      isGeneric: !!node.typeParameters && node.typeParameters.length > 0,\n      isUnion: node.type.kind === ts.SyntaxKind.UnionType,\n      isIntersection: node.type.kind === ts.SyntaxKind.IntersectionType,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false\n    }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractFunction",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractFunction",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract function information from a function declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractFunction:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.FunctionDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractFunction:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractFunction:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:functionNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "functionNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Function",
    "initializer": "{\n      nodeId: this.generateNodeId('Function', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Function'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isAsync: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AsyncKeyword) || false,\n      description: this.getJsDocComment(node),\n      parameterCount: node.parameters.length,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false,\n      isGenerator: !!node.asteriskToken,\n      isArrowFunction: false,\n      isFunctionExpression: false,\n      hasRestParameter: node.parameters.some(p => !!p.dotDotDotToken),\n      hasOptionalParameters: node.parameters.some(p => !!p.questionToken),\n      hasTypeParameters: !!node.typeParameters && node.typeParameters.length > 0\n    }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractMethod",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractMethod",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract method information from a method declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractMethod:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.MethodDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractMethod:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractMethod:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:parent",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parent",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "node.parent"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:parentName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parentName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "parent.name.getText()"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:methodNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "methodNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Method",
    "initializer": "{\n      nodeId: this.generateNodeId('Method', `${fileNode.path}:${parentName}.${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Method'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isAsync: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AsyncKeyword) || false,\n      isStatic: node.modifiers?.some(m => m.kind === ts.SyntaxKind.StaticKeyword) || false,\n      visibility: this.getVisibility(node),\n      description: this.getJsDocComment(node),\n      isAbstract: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AbstractKeyword) || false,\n      isGenerator: !!node.asteriskToken,\n      isGetter: false, // Would need to check if this is a getter method\n      isSetter: false, // Would need to check if this is a setter method\n      parameterCount: node.parameters.length,\n      hasRestParameter: node.parameters.some(p => !!p.dotDotDotToken),\n      hasOptionalParameters: node.parameters.some(p => !!p.questionToken),\n      hasTypeParameters: !!node.typeParameters && node.typeParameters.length > 0\n    }"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:parentNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parentNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.generateNodeId('Class', `${fileNode.path}:${parentName}`)"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractProperty",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractProperty",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract property information from a property declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractProperty:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.PropertyDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractProperty:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractProperty:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:propertyNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propertyNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Property",
    "initializer": "{\n      nodeId: this.generateNodeId('Property', `${fileNode.path}:${parentName}.${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Property'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isStatic: node.modifiers?.some(m => m.kind === ts.SyntaxKind.StaticKeyword) || false,\n      visibility: this.getVisibility(node),\n      typeString: node.type ? node.type.getText() : undefined,\n      initializer: node.initializer ? node.initializer.getText() : undefined,\n      isReadonly: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ReadonlyKeyword) || false,\n      isOptional: !!node.questionToken,\n      isParameterProperty: false,\n      hasDecorators: false // Simplified implementation\n    }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractVariableStatement",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractVariableStatement",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract variable information from a variable statement\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractVariableStatement:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.VariableStatement",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractVariableStatement:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractVariableStatement:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:variableNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "variableNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Variable",
    "initializer": "{\n        nodeId: this.generateNodeId('Variable', `${fileNode.path}:${name}`),\n        codebaseId: this.codebaseId,\n        labels: ['Variable'],\n        name,\n        file: fileNode.path,\n        startLine: this.getLineNumber(declaration.getStart()),\n        endLine: this.getLineNumber(declaration.getEnd()),\n        isConstant: node.declarationList.flags & ts.NodeFlags.Const ? true : false,\n        scope: this.getVariableScope(node),\n        typeString: declaration.type ? declaration.type.getText() : undefined,\n        initializer: declaration.initializer ? declaration.initializer.getText() : undefined\n      }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractParameters",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractParameters",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract parameters from a function or method declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractParameters:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.NodeArray<ts.ParameterDeclaration>",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractParameters:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractParameters:parent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parent",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "Function | Method",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:paramNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "paramNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Parameter",
    "initializer": "{\n        nodeId: this.generateNodeId('Parameter', `${parent.file}:${parent.name}:${name}`),\n        codebaseId: this.codebaseId,\n        labels: ['Parameter'],\n        name,\n        file: parent.file,\n        startLine: this.getLineNumber(param.getStart()),\n        endLine: this.getLineNumber(param.getEnd()),\n        index,\n        isOptional: !!param.questionToken,\n        isRest: !!param.dotDotDotToken,\n        typeString: param.type ? param.type.getText() : undefined,\n        initializer: param.initializer ? param.initializer.getText() : undefined,\n        isParameterProperty: false, // Default value, should be updated for actual parameter properties\n        hasDecorators: false // Default value, should be updated if decorators are present\n      }"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:hasParamRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasParamRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "HasParameter",
    "initializer": "{\n        nodeId: this.generateNodeId('HAS_PARAMETER', `${parent.nodeId}->${paramNode.nodeId}`),\n        codebaseId: this.codebaseId,\n        type: 'HAS_PARAMETER',\n        startNodeId: parent.nodeId,\n        endNodeId: paramNode.nodeId,\n        index,\n        isOptional: !!param.questionToken,\n        isRest: !!param.dotDotDotToken,\n        hasDefaultValue: !!param.initializer,\n        isDestructured: ts.isObjectBindingPattern(param.name) || ts.isArrayBindingPattern(param.name)\n      }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract import information from an import declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractImport:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.ImportDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractImport:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractImport:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:moduleSpecifier",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "moduleSpecifier",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.moduleSpecifier.getText().replace(/['\"]/g, '')"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:importClause",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importClause",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.importClause"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:hasDefaultImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasDefaultImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.name"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:hasNamedImports",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasNamedImports",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.namedBindings && ts.isNamedImports(importClause.namedBindings)"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:hasNamespaceImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasNamespaceImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.namedBindings && ts.isNamespaceImport(importClause.namedBindings)"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:isTypeOnly",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isTypeOnly",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.isTypeOnly"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:imports",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "imports",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:isPackageImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isPackageImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!moduleSpecifier.startsWith('.') && !moduleSpecifier.startsWith('/')"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:relationshipType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "isPackageImport ? 'REEXPORTS_FROM_PACKAGE' : 'REEXPORTS'"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:targetNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "targetNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "isPackageImport \n        ? this.generateNodeId('Package', moduleSpecifier)\n        : this.generateNodeId('File', this.resolveImportPath(fileNode.path, moduleSpecifier))"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:importRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Imports",
    "initializer": "{\n        nodeId: this.generateNodeId(relationshipType, `${fileNode.nodeId}->${targetNodeId}`),\n        codebaseId: this.codebaseId,\n        type: 'IMPORTS',\n        startNodeId: fileNode.nodeId,\n        endNodeId: targetNodeId,\n        imports,\n        importCount: imports.length,\n        hasDefaultImport,\n        hasNamedImports,\n        hasNamespaceImport,\n        isTypeOnly,\n        importPath: moduleSpecifier,\n        isRelative: true,\n        isResolved: true,\n        resolvedPath: this.resolveImportPath(fileNode.path, moduleSpecifier)\n      }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.extractExport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractExport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract export information from an export declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractExport:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.ExportDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractExport:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:extractExport:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:exportRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "exportRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ExportsLocal",
    "initializer": "{\n        nodeId: this.generateNodeId(relationshipType, `${fileNode.nodeId}->${targetNodeId}`),\n        codebaseId: this.codebaseId,\n        type: 'EXPORTS_LOCAL', // Using ExportsLocal as a simplification\n        startNodeId: fileNode.nodeId,\n        endNodeId: targetNodeId,\n        exportCount: 1,\n        hasNamedExports: true,\n        isTypeOnly: !!node.isTypeOnly,\n        isReExport: true,\n        exportNames: node.exportClause ?\n          ts.isNamedExports(node.exportClause) ?\n            node.exportClause.elements.map(e => e.name.getText()) :\n            ['*'] :\n          ['*'],\n        exportKinds: ['variable'] // Default, should be updated with actual types\n      }"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.hasDefaultExport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "hasDefaultExport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a source file has a default export\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:hasDefaultExport:sourceFile",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "sourceFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.SourceFile",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:hasDefault",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasDefault",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.getDefaultExportExpression",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getDefaultExportExpression",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the default export expression from a source file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:getDefaultExportExpression:sourceFile",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "sourceFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.SourceFile",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:expression",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "expression",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "typeString": "string | undefined"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.getLineNumber",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getLineNumber",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the line number for a position in the source file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:getLineNumber:pos",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "pos",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.getJsDocComment",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getJsDocComment",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the JSDoc comment for a node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:getJsDocComment:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:jsDocComments",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "jsDocComments",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "ts.getJSDocCommentsAndTags(node)"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.getVisibility",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getVisibility",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the visibility of a class member\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:getVisibility:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.MethodDeclaration | ts.PropertyDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.getVariableScope",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getVariableScope",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the scope of a variable\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:getVariableScope:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.VariableStatement",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.resolveImportPath",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "resolveImportPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Resolve an import path relative to a file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:resolveImportPath:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:resolveImportPath:importPath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "importPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:dir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dir",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.dirname(filePath)"
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:resolvedPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "resolvedPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.resolve(dir, importPath)"
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.generateNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "generateNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Generate a unique node ID\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:generateNodeId:type",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "type",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:generateNodeId:identifier",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "identifier",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.hasNodeDecorators",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "hasNodeDecorators",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a node has decorators\n   * This is a simplified implementation that would need to be expanded\n   * in a real-world scenario to properly detect decorators\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:hasNodeDecorators:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/parser/ts-parser.ts:TSParser.getFileSize",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getFileSize",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the size of a file in bytes\n   * Returns 0 if the file doesn't exist or can't be accessed\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/parser/ts-parser.ts:getFileSize:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/parser/ts-parser.ts:stats",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "stats",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.statSync(filePath)"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/schema/index.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/index.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/index.ts",
    "name": "index.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 60,
    "size": 2499,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Variable:src/schema/index.ts:SCHEMA_VERSION",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "SCHEMA_VERSION",
    "file": "src/schema/index.ts",
    "startLine": 17,
    "endLine": 17,
    "isConstant": true,
    "scope": "module",
    "initializer": "'2.0.0'"
  },
  {
    "nodeId": "Variable:src/schema/index.ts:SCHEMA_METADATA",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "SCHEMA_METADATA",
    "file": "src/schema/index.ts",
    "startLine": 17,
    "endLine": 21,
    "isConstant": true,
    "scope": "module",
    "initializer": "{\n  name: 'TypeScript Code Graph Schema',\n  version: SCHEMA_VERSION,\n  description: 'A comprehensive schema for representing TypeScript codebases as a graph',\n  author: 'TypeScript Code Graph Team',\n  license: 'MIT',\n  repository: 'https://github.com/typescript-code-graph/schema',\n  nodeTypes: [\n    'Codebase', 'Package', 'Directory', 'File', 'Module', 'Namespace',\n    'Class', 'Interface', 'Enum', 'TypeAlias', 'Function', 'Method',\n    'Constructor', 'Property', 'Variable', 'Parameter', 'JsxElement',\n    'JsxAttribute', 'Test', 'Component', 'Dependency', 'TypeDefinition',\n    'ASTNodeInfo'\n  ],\n  relationshipTypes: [\n    'IMPORTS', 'IMPORTS_FROM_PACKAGE', 'IMPORTS_TYPES', 'IMPORTS_TYPES_FROM_PACKAGE',\n    'EXPORTS_LOCAL', 'EXPORTS_DEFAULT', 'REEXPORTS', 'REEXPORTS_FROM_PACKAGE',\n    'REEXPORTS_ALL', 'EXTENDS', 'INTERFACE_EXTENDS', 'IMPLEMENTS', 'CALLS',\n    'CONTAINS', 'HAS_METHOD', 'HAS_PARAMETER', 'HAS_PROPERTY', 'REFERENCES_TYPE',\n    'REFERENCES_VARIABLE', 'DEPENDS_ON', 'IS_DECORATED_BY', 'TESTS', 'RENDERS',\n    'USES_HOOK', 'AST_PARENT_CHILD', 'DEFINES_VARIABLE', 'DEFINES_FUNCTION',\n    'DEFINES_INTERFACE', 'DEFINES_CLASS', 'DEFINES_TYPE_ALIAS', 'DEFINES_ENUM',\n    'DEFINES_NAMESPACE', 'DEFINES_MODULE', 'DEFINES_COMPONENT'\n  ],\n  neo4jIndexes: [\n    { label: 'File', property: 'path', type: 'BTREE' },\n    { label: 'CodeElement', property: 'name', type: 'BTREE' },\n    { label: 'Node', property: 'codebaseId', type: 'BTREE' },\n    { label: 'Class', property: 'name', type: 'BTREE' },\n    { label: 'Function', property: 'name', type: 'BTREE' },\n    { label: 'Variable', property: 'name', type: 'BTREE' },\n    { label: 'Component', property: 'name', type: 'BTREE' }\n  ],\n  neo4jConstraints: [\n    { label: 'Node', property: 'nodeId', type: 'UNIQUENESS' }\n  ],\n  neo4jFullTextIndexes: [\n    { name: 'codeSearch', labels: ['CodeElement'], properties: ['name', 'documentation', 'sourceCode'] }\n  ]\n}"
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/schema/nodes.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/nodes.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/nodes.ts",
    "name": "nodes.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 352,
    "size": 8090,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Codebase",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Codebase",
    "file": "src/schema/nodes.ts",
    "startLine": 5,
    "endLine": 12,
    "description": "/**\n * Represents an entire codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Package",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Package",
    "file": "src/schema/nodes.ts",
    "startLine": 14,
    "endLine": 21,
    "description": "/**\n * Represents a package (npm package, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 11,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Directory",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Directory",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a directory in the codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:File",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "File",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a file in the codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 21,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Module",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Module",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a module in the codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Namespace",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Namespace",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a namespace declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Class",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Class",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a class declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 20,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Interface",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Interface",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an interface declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Enum",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Enum",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an enum declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:EnumMember",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "EnumMember",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an enum member\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:TypeAlias",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeAlias",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type alias declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Function",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Function",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a function declaration or expression\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 13,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Method",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Method",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a method in a class or interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 16,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Constructor",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Constructor",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a constructor in a class\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 9,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Property",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Property",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a property in a class or interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 9,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Variable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Variable",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a variable declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 12,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Parameter",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Parameter",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a function or method parameter\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:JsxElement",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "JsxElement",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a JSX/TSX element (React component)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:JsxAttribute",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "JsxAttribute",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a JSX/TSX attribute\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Test",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Test",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a test (unit test, integration test, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Component",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Component",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a component (React, Vue, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 12,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:Dependency",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Dependency",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a dependency (npm package, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:TypeDefinition",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeDefinition",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type definition\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/nodes.ts:ASTNodeInfo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ASTNodeInfo",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents direct AST node information\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/schema/relationships.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/relationships.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/relationships.ts",
    "name": "relationships.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 286,
    "size": 6552,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ImportRelationship",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportRelationship",
    "file": "src/schema/relationships.ts",
    "startLine": 4,
    "endLine": 14,
    "description": "/**\n * Base import relationship with common properties\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 10,
    "extendsCount": 1,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ExportRelationship",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExportRelationship",
    "file": "src/schema/relationships.ts",
    "startLine": 15,
    "endLine": 19,
    "description": "/**\n * Base export relationship with common properties\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Imports",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Imports",
    "file": "src/schema/relationships.ts",
    "startLine": 20,
    "endLine": 21,
    "description": "/**\n * File imports from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ImportsFromPackage",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsFromPackage",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File imports from a package\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ImportsTypes",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsTypes",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File imports types from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ImportsTypesFromPackage",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsTypesFromPackage",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File imports types from a package\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ExportsLocal",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExportsLocal",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File exports a local declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ExportsDefault",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExportsDefault",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File exports a default declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Reexports",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Reexports",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File re-exports from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ReexportsFromPackage",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReexportsFromPackage",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File re-exports from a package\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ReexportsAll",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReexportsAll",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File re-exports all from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Extends",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Extends",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class extends another class\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:InterfaceExtends",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "InterfaceExtends",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Interface extends another interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Implements",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Implements",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class implements an interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Calls",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Calls",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Function or method calls another function or method\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Contains",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Contains",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity contains another entity (e.g., file contains class)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:HasMethod",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "HasMethod",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class or interface has a method\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:HasParameter",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "HasParameter",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Function or method has a parameter\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:HasProperty",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "HasProperty",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class has a property\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ReferencesType",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReferencesType",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity references a type\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ReferencesVariable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReferencesVariable",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity references a variable\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:DependsOn",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "DependsOn",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity depends on another entity\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:IsDecoratedBy",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "IsDecoratedBy",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is decorated by a decorator\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Tests",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Tests",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is a test for another entity\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:Renders",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Renders",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is a component that renders another component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:UsesHook",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "UsesHook",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is a component that uses a hook\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/relationships.ts:ASTParentChild",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ASTParentChild",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents AST parent-child relationship\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/schema/types.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/types.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/types.ts",
    "name": "types.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 127,
    "size": 4052,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/schema/types.ts:GraphEntity",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "GraphEntity",
    "file": "src/schema/types.ts",
    "startLine": 5,
    "endLine": 9,
    "description": "/**\n * Base interface for all graph entities (nodes and relationships)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:Node",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Node",
    "file": "src/schema/types.ts",
    "startLine": 10,
    "endLine": 17,
    "description": "/**\n * Base interface for all node types\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:Relationship",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Relationship",
    "file": "src/schema/types.ts",
    "startLine": 18,
    "endLine": 21,
    "description": "/**\n * Base interface for all relationship types\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:CodeLocation",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "CodeLocation",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Location information for code elements\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:CodeElement",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "CodeElement",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Base interface for all code elements (functions, classes, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:NamedType",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "NamedType",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Base interface for all named types (classes, interfaces, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:Callable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Callable",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Base interface for all callable elements (functions, methods)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:TypeParameter",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeParameter",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type parameter (generic)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:Decorator",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Decorator",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a decorator\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:TypeReference",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeReference",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type reference\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 14,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/schema/types.ts:Neo4jMetadata",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Neo4jMetadata",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Metadata for Neo4j indexing and querying\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "File:/Users/zach/Dev/SAGE/cli/src/transformer/graph-transformer.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/transformer/graph-transformer.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/transformer/graph-transformer.ts",
    "name": "graph-transformer.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 215,
    "size": 6606,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "Interface:src/transformer/graph-transformer.ts:TransformResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TransformResult",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 4,
    "endLine": 10,
    "description": "/**\n * Result of a graph transformation\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Interface:src/transformer/graph-transformer.ts:GraphTransformerConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "GraphTransformerConfig",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 11,
    "endLine": 14,
    "description": "/**\n * Configuration for the graph transformer\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "Class:src/transformer/graph-transformer.ts:GraphTransformer",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "GraphTransformer",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 17,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Transformer for converting parsed TypeScript data into a graph model\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 7,
    "propertyCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Property:src/transformer/graph-transformer.ts:GraphTransformer.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 17,
    "endLine": 18,
    "isStatic": false,
    "visibility": "private",
    "typeString": "GraphTransformerConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.transform",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "transform",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Transform parsed TypeScript data into a graph model\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:transform:parseResults",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parseResults",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:nodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Node[]",
    "initializer": "[]"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:relationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Relationship[]",
    "initializer": "[]"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:uniqueNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "uniqueNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.deduplicateNodes(nodes)"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:uniqueRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "uniqueRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.deduplicateRelationships(relationships)"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:enhancedNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "enhancedNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.ensureNodeLabels(uniqueNodes)"
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.deduplicateNodes",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "deduplicateNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Deduplicate nodes by nodeId\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:deduplicateNodes:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:nodeMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeMap",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, Node>()"
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.deduplicateRelationships",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "deduplicateRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Deduplicate relationships by nodeId\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:deduplicateRelationships:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:relationshipMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipMap",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, Relationship>()"
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.validate",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "validate",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Validate the graph model\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:validate:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "TransformResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:invalidNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "invalidNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.nodes.filter(node => !this.isValidNode(node))"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:invalidRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "invalidRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.relationships.filter(rel => !this.isValidRelationship(rel))"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:nodeIds",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeIds",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Set(result.nodes.map(node => node.nodeId))"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:builtInModules",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "builtInModules",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Set([\n      'path', 'fs', 'os', 'util', 'events', 'stream', 'http', 'https',\n      'net', 'crypto', 'child_process', 'buffer', 'url', 'querystring',\n      'assert', 'zlib', 'tty', 'dgram', 'dns', 'cluster', 'readline',\n      'string_decoder', 'timers', 'punycode', 'domain', 'process', 'v8',\n      'module', 'console', 'worker_threads', 'perf_hooks', 'async_hooks',\n      'vm', 'inspector', 'trace_events', 'wasi', 'repl', 'sys'\n    ])"
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:danglingRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "danglingRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.relationships.filter(rel => {\n      // Skip validation for all IMPORTS_FROM_PACKAGE relationships\n      if (rel.type === 'IMPORTS_FROM_PACKAGE') {\n        return false;\n      }\n      \n      // Skip validation for EXPORTS_LOCAL relationships with endNodeId 'local'\n      if (rel.type === 'EXPORTS_LOCAL' && rel.endNodeId === 'local') {\n        return false;\n      }\n      \n      // Skip validation for EXTENDS and IMPLEMENTS relationships that reference types by name\n      if ((rel.type === 'EXTENDS' || rel.type === 'IMPLEMENTS') &&\n          (typeof rel.endNodeId === 'string' && !rel.endNodeId.includes(':'))) {\n        return false;\n      }\n      \n      // Check if both start and end nodes exist\n      return !nodeIds.has(rel.startNodeId) || !nodeIds.has(rel.endNodeId);\n    })"
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.isValidNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isValidNode",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a node is valid\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:isValidNode:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.ensureNodeLabels",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "ensureNodeLabels",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Ensure nodes have appropriate labels based on their interfaces\n   * This is crucial for Neo4j schema alignment\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:ensureNodeLabels:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "Variable:src/transformer/graph-transformer.ts:enhancedNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "enhancedNode",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...node }"
  },
  {
    "nodeId": "Method:src/transformer/graph-transformer.ts:GraphTransformer.isValidRelationship",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isValidRelationship",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a relationship is valid\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "Parameter:src/transformer/graph-transformer.ts:isValidRelationship:relationship",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationship",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship",
    "isParameterProperty": false,
    "hasDecorators": false
  }
]