[
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/index.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "index.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/index.ts",
    "name": "index.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 21,
    "size": 823,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/scripts/analyze-codebase-relationships.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "scripts/analyze-codebase-relationships.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/scripts/analyze-codebase-relationships.ts",
    "name": "analyze-codebase-relationships.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 160,
    "size": 5837,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:scripts/analyze-codebase-relationships.ts:analyzeCodebaseRelationships",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "analyzeCodebaseRelationships",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 9,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Script to analyze relationships between multiple codebases in Neo4j\n * \n * Usage:\n * npx ts-node scripts/analyze-codebase-relationships.ts\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 11,
    "endLine": 17,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    uri: process.env.NEO4J_URI || 'neo4j://localhost:7687',\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'justdontask',\n    database: process.env.NEO4J_DATABASE\n  }"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 20,
    "endLine": 20,
    "isConstant": true,
    "scope": "block",
    "initializer": "new QueryExecutor(neo4jConfig)"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:codebasesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebasesResult",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n      MATCH (n:Node)\n      WITH DISTINCT n.codebaseId AS codebaseId\n      MATCH (n:Node {codebaseId: codebaseId})\n      WITH codebaseId, count(n) AS nodeCount\n      RETURN codebaseId, nodeCount\n      ORDER BY nodeCount DESC\n    `)"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:nodeTypesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeTypesResult",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n      MATCH (n)\n      WITH n.codebaseId AS codebaseId, labels(n) AS labels, count(*) AS count\n      WHERE codebaseId IS NOT NULL\n      RETURN codebaseId, labels, count\n      ORDER BY codebaseId, count DESC\n    `)"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:currentCodebase",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "currentCodebase",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "''"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:crossRelResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "crossRelResult",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n        MATCH (source:Node)-[r]->(target:Node)\n        WHERE r.isCrossCodebase = true OR source.codebaseId <> target.codebaseId\n        RETURN\n          r.type AS relationshipType,\n          source.codebaseId AS sourceCodebase,\n          target.codebaseId AS targetCodebase,\n          count(*) AS count\n        ORDER BY count DESC\n      `)"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:dependenciesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependenciesResult",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n        MATCH (source:Node)-[r]->(target:Node)\n        WHERE source.codebaseId <> target.codebaseId\n        WITH source.codebaseId AS sourceCodebase, target.codebaseId AS targetCodebase, count(*) AS relationshipCount\n        RETURN sourceCodebase, targetCodebase, relationshipCount\n        ORDER BY relationshipCount DESC\n      `)"
  },
  {
    "nodeId": "self:Variable:scripts/analyze-codebase-relationships.ts:fileDepResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fileDepResult",
    "file": "scripts/analyze-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n        MATCH (sourceFile:File)-[:DEFINES_VARIABLE|DEFINES_FUNCTION|DEFINES_CLASS|DEFINES_INTERFACE]->(source:Node)\n        MATCH (source)-[r]->(target:Node)\n        MATCH (targetFile:File)-[:DEFINES_VARIABLE|DEFINES_FUNCTION|DEFINES_CLASS|DEFINES_INTERFACE]->(target)\n        WHERE source.codebaseId <> target.codebaseId\n        WITH\n          sourceFile.path AS sourcePath,\n          targetFile.path AS targetPath,\n          source.codebaseId AS sourceCodebase,\n          target.codebaseId AS targetCodebase,\n          count(*) AS dependencyCount\n        RETURN\n          sourceCodebase,\n          targetCodebase,\n          sourcePath,\n          targetPath,\n          dependencyCount\n        ORDER BY dependencyCount DESC\n        LIMIT 20\n      `)"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/scripts/cleanup-codebase.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "scripts/cleanup-codebase.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/scripts/cleanup-codebase.ts",
    "name": "cleanup-codebase.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 118,
    "size": 3858,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:scripts/cleanup-codebase.ts:cleanupCodebase",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "cleanupCodebase",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 8,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Script to clean up a specific codebase from Neo4j\n * \n * Usage:\n * npx ts-node scripts/cleanup-codebase.ts <codebase-id>\n */",
    "parameterCount": 1,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:scripts/cleanup-codebase.ts:cleanupCodebase:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 9,
    "endLine": 9,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 11,
    "endLine": 17,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    uri: process.env.NEO4J_URI || 'neo4j://localhost:7687',\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'justdontask',\n    database: process.env.NEO4J_DATABASE\n  }"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 19,
    "endLine": 20,
    "isConstant": true,
    "scope": "block",
    "initializer": "new QueryExecutor(neo4jConfig)"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:countResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "countResult",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(\n      `MATCH (n)\n       WHERE n.codebaseId = $codebaseId\n          OR n.nodeId STARTS WITH $codebaseIdPrefix\n          OR n.nodeId = $codebaseId\n          OR (n:Codebase AND n.name = $codebaseId)\n       RETURN count(n) as nodeCount`,\n      {\n        codebaseId,\n        codebaseIdPrefix: `${codebaseId}:`\n      }\n    )"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:nodeCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeCount",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "countResult.records[0]?.nodeCount || 0"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:deleteResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deleteResult",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(\n        `MATCH (n)\n         WHERE n.codebaseId = $codebaseId\n            OR n.nodeId STARTS WITH $codebaseIdPrefix\n            OR n.nodeId = $codebaseId\n            OR (n:Codebase AND n.name = $codebaseId)\n         DETACH DELETE n\n         RETURN count(n) as deletedCount`,\n        {\n          codebaseId,\n          codebaseIdPrefix: `${codebaseId}:`\n        }\n      )"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:deletedCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deletedCount",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "deleteResult.records[0]?.deletedCount || 0"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:cleanupResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "cleanupResult",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(\n          `MATCH ()-[r]-()\n           WHERE r.codebaseId = $codebaseId OR\n                 r.sourceCodebaseId = $codebaseId OR\n                 r.targetCodebaseId = $codebaseId\n           DELETE r\n           RETURN count(r) as deletedRelCount`,\n          { codebaseId }\n        )"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:deletedRelCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deletedRelCount",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "cleanupResult.records[0]?.deletedRelCount || 0"
  },
  {
    "nodeId": "self:Variable:scripts/cleanup-codebase.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "scripts/cleanup-codebase.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "module",
    "initializer": "process.argv[2]"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/scripts/fix-cross-codebase-relationships.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "scripts/fix-cross-codebase-relationships.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/scripts/fix-cross-codebase-relationships.ts",
    "name": "fix-cross-codebase-relationships.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 100,
    "size": 3570,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:scripts/fix-cross-codebase-relationships.ts:fixCrossCodebaseRelationships",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "fixCrossCodebaseRelationships",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 12,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Script to fix cross-codebase relationship properties in Neo4j\n * \n * This script updates the isCrossCodebase, sourceCodebaseId, and targetCodebaseId\n * properties of relationships based on the actual codebaseId properties of the\n * source and target nodes.\n * \n * Usage:\n * npx ts-node scripts/fix-cross-codebase-relationships.ts\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 17,
    "endLine": 20,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    uri: process.env.NEO4J_URI || 'neo4j://localhost:7687',\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'justdontask',\n    database: process.env.NEO4J_DATABASE\n  }"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new QueryExecutor(neo4jConfig)"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:countResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "countResult",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n      MATCH (source:Node)-[r]->(target:Node)\n      WHERE r.isCrossCodebase = true\n      RETURN count(r) as relCount\n    `)"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:relCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relCount",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "countResult.records[0]?.relCount?.low || 0"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:updateResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "updateResult",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n      MATCH (source:Node)-[r]->(target:Node)\n      WHERE r.isCrossCodebase = true\n      WITH source, r, target,\n           source.codebaseId <> target.codebaseId as actualIsCrossCodebase\n      SET r.isCrossCodebase = actualIsCrossCodebase,\n          r.sourceCodebaseId = source.codebaseId,\n          r.targetCodebaseId = target.codebaseId\n      RETURN count(r) as updatedCount\n    `)"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:updatedCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "updatedCount",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "updateResult.records[0]?.updatedCount?.low || 0"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:checkResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "checkResult",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n      MATCH (source:Node)-[r]->(target:Node)\n      WHERE r.isCrossCodebase = true\n      RETURN count(r) as crossCodebaseCount\n    `)"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:crossCodebaseCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "crossCodebaseCount",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "checkResult.records[0]?.crossCodebaseCount?.low || 0"
  },
  {
    "nodeId": "self:Variable:scripts/fix-cross-codebase-relationships.ts:crossCodebaseResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "crossCodebaseResult",
    "file": "scripts/fix-cross-codebase-relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(`\n        MATCH (source:Node)-[r {isCrossCodebase: true}]->(target:Node)\n        RETURN \n          r.type AS relationshipType,\n          source.codebaseId AS sourceCodebase,\n          target.codebaseId AS targetCodebase,\n          count(*) AS count\n        ORDER BY count DESC\n      `)"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/scripts/import-json-to-neo4j.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "scripts/import-json-to-neo4j.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/scripts/import-json-to-neo4j.ts",
    "name": "import-json-to-neo4j.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 192,
    "size": 6606,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:scripts/import-json-to-neo4j.ts:importJsonToNeo4j",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "importJsonToNeo4j",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 11,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Script to import JSON files to Neo4j with special handling for complex properties\n * \n * Usage:\n * npx ts-node scripts/import-json-to-neo4j.ts <json-dir> <codebase-id>\n */",
    "parameterCount": 2,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:scripts/import-json-to-neo4j.ts:importJsonToNeo4j:jsonDir",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "jsonDir",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 11,
    "endLine": 12,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:scripts/import-json-to-neo4j.ts:importJsonToNeo4j:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 12,
    "endLine": 12,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 14,
    "endLine": 19,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    uri: process.env.NEO4J_URI || 'neo4j://localhost:7687',\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'justdontask',\n    database: process.env.NEO4J_DATABASE\n  }"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new QueryExecutor(neo4jConfig)"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:nodesPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodesPath",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(jsonDir, 'nodes.json')"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:relationshipsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsPath",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(jsonDir, 'relationships.json')"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:nodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "JSON.parse(fs.readFileSync(nodesPath, 'utf8'))"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:relationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "JSON.parse(fs.readFileSync(relationshipsPath, 'utf8'))"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:importedNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importedNodes",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:batchSize",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batchSize",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "500"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:batch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batch",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rels.slice(i, i + batchSize)"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:query",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "query",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n          UNWIND $relationships AS rel\n          MATCH (start:Node {nodeId: rel.startNodeId})\n          MATCH (end:Node {nodeId: rel.endNodeId})\n          CREATE (start)-[r:\\`${relType}\\`]->(end)\n          SET r = rel\n          RETURN count(r) AS count\n        `"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(query, { relationships: transformedBatch })"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:count",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "count",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:record",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "record",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records[0]"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:importedRels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importedRels",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:relsByType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relsByType",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "{ [key: string]: any[] }",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:rels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "rels",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relsByType[relType]"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:transformedBatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformedBatch",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "batch.map(rel => {\n          // Clone the relationship to avoid modifying the original\n          const transformed = { ...rel };\n          \n          // Handle complex properties\n          if (transformed.bindings) {\n            // Convert Map to string representation\n            transformed.bindingsJson = JSON.stringify(transformed.bindings);\n            delete transformed.bindings;\n          }\n          \n          // Handle event handlers in LISTENS_TO relationships\n          if (relType === 'LISTENS_TO' && transformed.handlers) {\n            // Convert handlers to string representation\n            transformed.handlersJson = JSON.stringify(transformed.handlers);\n            delete transformed.handlers;\n          }\n          \n          // Convert any object properties to JSON strings\n          for (const key in transformed) {\n            if (transformed[key] !== null &&\n                typeof transformed[key] === 'object' &&\n                !Array.isArray(transformed[key])) {\n              transformed[key + 'Json'] = JSON.stringify(transformed[key]);\n              delete transformed[key];\n            }\n          }\n          \n          return transformed;\n        })"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:transformed",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformed",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...rel }"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:jsonDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "jsonDir",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "module",
    "initializer": "process.argv[2]"
  },
  {
    "nodeId": "self:Variable:scripts/import-json-to-neo4j.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "scripts/import-json-to-neo4j.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "module",
    "initializer": "process.argv[3]"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/cli.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/cli.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/cli.ts",
    "name": "cli.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 641,
    "size": 21842,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Variable:src/cli.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 15,
    "endLine": 15,
    "isConstant": true,
    "scope": "module",
    "initializer": "process.argv.slice(2)"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:command",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "command",
    "file": "src/cli.ts",
    "startLine": 15,
    "endLine": 17,
    "isConstant": true,
    "scope": "module",
    "initializer": "args[0]"
  },
  {
    "nodeId": "self:Function:src/cli.ts:main",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "main",
    "file": "src/cli.ts",
    "startLine": 18,
    "endLine": 21,
    "isAsync": true,
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Function:src/cli.ts:printUsage",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "printUsage",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Print usage information\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Function:src/cli.ts:analyzeProject",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "analyzeProject",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Analyze a TypeScript project\n */",
    "parameterCount": 1,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/cli.ts:analyzeProject:args",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/cli.ts:skipValidation",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "skipValidation",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args.includes('--skip-validation')"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:cleanArgs",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "cleanArgs",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args.filter(arg => arg !== '--skip-validation')"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:projectPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "projectPath",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.cwd()"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:outputDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "outputDir",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(projectPath, 'output', `${codebaseId}-analysis`)"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[0]"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    uri: process.env.NEO4J_URI || 'neo4j://localhost:7687',\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'justdontask',\n    database: process.env.NEO4J_DATABASE\n  }"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:config",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    rootDir: projectPath,\n    outputDir,\n    codebaseId,\n    neo4j: neo4jConfig\n  }"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:codeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codeGraph",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(config)"
  },
  {
    "nodeId": "self:Function:src/cli.ts:queryGraph",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "queryGraph",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Run a Cypher query against the Neo4j database\n */",
    "parameterCount": 1,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/cli.ts:queryGraph:args",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/cli.ts:cypherQuery",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "cypherQuery",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1]"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(query, { relationships: transformedBatch })"
  },
  {
    "nodeId": "self:Function:src/cli.ts:ingestProject",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "ingestProject",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Ingest a TypeScript project from the current directory\n * This combines cleanup, analysis, and import in one command\n */",
    "parameterCount": 1,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/cli.ts:ingestProject:args",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/cli.ts:noCleanup",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "noCleanup",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args.includes('--no-cleanup')"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:{ QueryExecutor }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ QueryExecutor }",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await import('./neo4j/query-executor.js')"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new QueryExecutor(neo4jConfig)"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:countResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "countResult",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(\n        `MATCH (n)\n         WHERE n.codebaseId = $codebaseId\n            OR n.nodeId STARTS WITH $codebaseIdPrefix\n            OR n.nodeId = $codebaseId\n            OR (n:Codebase AND n.name = $codebaseId)\n         RETURN count(n) as nodeCount`,\n        {\n          codebaseId,\n          codebaseIdPrefix: `${codebaseId}:`\n        }\n      )"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:nodeCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeCount",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:record",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "record",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records[0]"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:deleteResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deleteResult",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(\n            `MATCH (n)\n             WHERE n.codebaseId = $codebaseId\n                OR n.nodeId STARTS WITH $codebaseIdPrefix\n                OR n.nodeId = $codebaseId\n                OR (n:Codebase AND n.name = $codebaseId)\n             DETACH DELETE n\n             RETURN count(n) as deletedCount`,\n            {\n              codebaseId,\n              codebaseIdPrefix: `${codebaseId}:`\n            }\n          )"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:deletedCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deletedCount",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:cleanupResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "cleanupResult",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await queryExecutor.executeQuery(\n              `MATCH ()-[r]-()\n               WHERE r.codebaseId = $codebaseId OR\n                     r.sourceCodebaseId = $codebaseId OR\n                     r.targetCodebaseId = $codebaseId\n               DELETE r\n               RETURN count(r) as deletedRelCount`,\n              { codebaseId }\n            )"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:deletedRelCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deletedRelCount",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:analysisConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "analysisConfig",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      ...config,\n      neo4j: undefined // Don't import to Neo4j during analysis\n    }"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:analysisCodeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "analysisCodeGraph",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(analysisConfig)"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:nodesPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodesPath",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(outputDir, 'nodes.json')"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:relationshipsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsPath",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(outputDir, 'relationships.json')"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:nodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "JSON.parse(fs.readFileSync(nodesPath, 'utf8'))"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:relationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "JSON.parse(fs.readFileSync(relationshipsPath, 'utf8'))"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:importedNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importedNodes",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:batchSize",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batchSize",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "500"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:batch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batch",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rels.slice(i, i + batchSize)"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:processedBatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "processedBatch",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "batch.map((node: any) => {\n        const processed = { ...node };\n        \n        // Handle Map objects and other complex types\n        for (const key in processed) {\n          // Check for Map objects specifically\n          if (processed[key] &&\n              typeof processed[key] === 'object' &&\n              processed[key].constructor &&\n              processed[key].constructor.name === 'Map') {\n            console.log(`Converting Map in node ${node.nodeId}, property ${key} to JSON string`);\n            try {\n              // Convert Map to object then to JSON string\n              const mapObj: Record<string, any> = {};\n              for (const [k, v] of Object.entries(processed[key])) {\n                mapObj[k] = v;\n              }\n              processed[key + 'Json'] = JSON.stringify(mapObj);\n              delete processed[key];\n            } catch (e) {\n              console.log(`Error converting Map in node ${node.nodeId}, property ${key}: ${e}`);\n              delete processed[key];\n            }\n          }\n          // Handle other non-primitive objects (except arrays)\n          else if (processed[key] !== null &&\n              typeof processed[key] === 'object' &&\n              !Array.isArray(processed[key])) {\n            try {\n              processed[key + 'Json'] = JSON.stringify(processed[key]);\n              delete processed[key];\n            } catch (e) {\n              console.log(`Error converting object in node ${node.nodeId}, property ${key}: ${e}`);\n              delete processed[key];\n            }\n          }\n        }\n        \n        return processed;\n      })"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:processed",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "processed",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...node }"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:mapObj",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "mapObj",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, any>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:query",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "query",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n          UNWIND $relationships AS rel\n          MATCH (start:Node {nodeId: rel.startNodeId})\n          MATCH (end:Node {nodeId: rel.endNodeId})\n          CREATE (start)-[r:\\`${relType}\\`]->(end)\n          SET r = rel\n          RETURN count(r) AS count\n        `"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:count",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "count",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:importedRels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importedRels",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:relsByType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relsByType",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "{ [key: string]: any[] }",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:rels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "rels",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relsByType[relType]"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:transformedBatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformedBatch",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "batch.map((rel: any) => {\n          // Clone the relationship to avoid modifying the original\n          const transformed = { ...rel };\n          \n          // Handle complex properties\n          if (transformed.bindings) {\n            // Convert Map to string representation\n            transformed.bindingsJson = JSON.stringify(transformed.bindings);\n            delete transformed.bindings;\n          }\n          \n          // Handle event handlers in LISTENS_TO relationships\n          if (relType === 'LISTENS_TO' && transformed.handlers) {\n            // Convert handlers to string representation\n            transformed.handlersJson = JSON.stringify(transformed.handlers);\n            delete transformed.handlers;\n          }\n          \n          // Convert any object properties to JSON strings\n          for (const key in transformed) {\n            // Check for Map objects specifically\n            if (transformed[key] &&\n                typeof transformed[key] === 'object' &&\n                transformed[key].constructor &&\n                transformed[key].constructor.name === 'Map') {\n              console.log(`Converting Map in relationship ${rel.nodeId}, property ${key} to JSON string`);\n              try {\n                // Convert Map to object then to JSON string\n                const mapObj: Record<string, any> = {};\n                for (const [k, v] of Object.entries(transformed[key])) {\n                  mapObj[k] = v;\n                }\n                transformed[key + 'Json'] = JSON.stringify(mapObj);\n                delete transformed[key];\n              } catch (e) {\n                console.log(`Error converting Map in relationship ${rel.nodeId}, property ${key}: ${e}`);\n                delete transformed[key];\n              }\n            }\n            // Handle other non-primitive objects\n            else if (transformed[key] !== null &&\n                typeof transformed[key] === 'object' &&\n                !Array.isArray(transformed[key])) {\n              transformed[key + 'Json'] = JSON.stringify(transformed[key]);\n              delete transformed[key];\n            }\n          }\n          \n          return transformed;\n        })"
  },
  {
    "nodeId": "self:Variable:src/cli.ts:transformed",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformed",
    "file": "src/cli.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...rel }"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/examples/analyze-project.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/examples/analyze-project.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/examples/analyze-project.ts",
    "name": "analyze-project.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 159,
    "size": 5129,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:src/examples/analyze-project.ts:main",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "main",
    "file": "src/examples/analyze-project.ts",
    "startLine": 11,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Example script that demonstrates how to use the TypeScript Code Graph system\n * to analyze a TypeScript project and import it into Neo4j.\n * \n * Usage:\n * ```\n * ts-node src/examples/analyze-project.ts /path/to/typescript/project\n * ```\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/examples/analyze-project.ts",
    "startLine": 12,
    "endLine": 14,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.argv.slice(2)"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:projectPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "projectPath",
    "file": "src/examples/analyze-project.ts",
    "startLine": 18,
    "endLine": 18,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.resolve(args[0])"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:outputDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "outputDir",
    "file": "src/examples/analyze-project.ts",
    "startLine": 19,
    "endLine": 20,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1] ? path.resolve(args[1]) : path.join(process.cwd(), 'output')"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/examples/analyze-project.ts",
    "startLine": 20,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[2] || path.basename(projectPath)"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:neo4jConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "neo4jConfig",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.env.NEO4J_URI ? {\n    uri: process.env.NEO4J_URI,\n    username: process.env.NEO4J_USERNAME || 'neo4j',\n    password: process.env.NEO4J_PASSWORD || 'password',\n    database: process.env.NEO4J_DATABASE\n  } : undefined"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:config",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n    rootDir: projectPath,\n    outputDir,\n    codebaseId,\n    neo4j: neo4jConfig\n  }"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:codeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codeGraph",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(config)"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:nodeCountsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeCountsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH (n)\n        WHERE n.codebaseId = $codebaseId\n        RETURN labels(n) AS labels, count(n) AS count\n        ORDER BY count DESC\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:relCountsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relCountsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH ()-[r]->()\n        WHERE r.codebaseId = $codebaseId\n        RETURN type(r) AS type, count(r) AS count\n        ORDER BY count DESC\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:complexClassesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "complexClassesResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH (c:Class)-[:HAS_METHOD]->(m:Method)\n        WHERE c.codebaseId = $codebaseId\n        WITH c, count(m) AS methodCount\n        ORDER BY methodCount DESC\n        LIMIT 10\n        RETURN c.name AS className, methodCount\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:circularDepsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "circularDepsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH path = (a:File)-[:IMPORTS*]->(b:File)-[:IMPORTS*]->(a)\n        WHERE a.codebaseId = $codebaseId AND b.codebaseId = $codebaseId\n        RETURN a.path AS from, b.path AS to\n        LIMIT 10\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/examples/analyze-project.ts:unusedExportsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "unusedExportsResult",
    "file": "src/examples/analyze-project.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await codeGraph.executeQuery(`\n        MATCH (f:File)-[:EXPORTS_LOCAL|EXPORTS_DEFAULT]->(e)\n        WHERE f.codebaseId = $codebaseId\n        AND NOT EXISTS((e)<-[:IMPORTS]-())\n        RETURN f.path AS file, e.name AS export\n        LIMIT 10\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/index.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/index.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/index.ts",
    "name": "index.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 522,
    "size": 17417,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/index.ts:Config",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Config",
    "file": "src/index.ts",
    "startLine": 17,
    "endLine": 21,
    "description": "/**\n * Configuration for the TypeScript codebase to Neo4j graph system\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 0,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/index.ts:Config.rootDir",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "rootDir",
    "typeString": "string",
    "description": "/**\n   * Root directory of the codebase to analyze\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/index.ts:Config.codebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "codebaseId",
    "typeString": "string",
    "description": "/**\n   * Unique identifier for the codebase\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/index.ts:Config.outputDir",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "outputDir",
    "typeString": "string",
    "description": "/**\n   * Output directory for the graph data\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/index.ts:Config.neo4j",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "neo4j",
    "typeString": "{\n    uri: string;\n    username: string;\n    password: string;\n    database?: string;\n    defaultTimeout?: number;\n  }",
    "description": "/**\n   * Neo4j connection configuration\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:Class:src/index.ts:TSCodeGraph",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "TSCodeGraph",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Main class for the TypeScript codebase to Neo4j graph system\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 12,
    "propertyCount": 6,
    "isExported": false,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/index.ts:TSCodeGraph.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Config",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/index.ts:TSCodeGraph.tsParser",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "tsParser",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "TSParser",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/index.ts:TSCodeGraph.vueParser",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "vueParser",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "VueParser | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/index.ts:TSCodeGraph.packageParser",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "packageParser",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "PackageParser",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/index.ts:TSCodeGraph.transformer",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "transformer",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "GraphTransformer",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/index.ts:TSCodeGraph.queryExecutor",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "queryExecutor",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "QueryExecutor | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.process",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "process",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Process a TypeScript codebase and generate a Neo4j graph\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:process:skipValidation",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "skipValidation",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "boolean",
    "initializer": "false",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/index.ts:codebaseNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseNode",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      nodeId: this.config.codebaseId,\n      name: this.config.codebaseId,\n      codebaseId: this.config.codebaseId, // Required by Node type\n      createdAt: new Date().toISOString(),\n      description: `Codebase from ${this.config.rootDir}`,\n      language: \"typescript\", // Default to typescript\n      labels: [\"Codebase\", \"Node\"]\n    }"
  },
  {
    "nodeId": "self:Variable:src/index.ts:sourceFiles",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sourceFiles",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.findSourceFiles(this.config.rootDir)"
  },
  {
    "nodeId": "self:Variable:src/index.ts:vueFileCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "vueFileCount",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "sourceFiles.filter((file: string) => file.endsWith('.vue')).length"
  },
  {
    "nodeId": "self:Variable:src/index.ts:tsFileCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tsFileCount",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "sourceFiles.length - vueFileCount"
  },
  {
    "nodeId": "self:Variable:src/index.ts:parseResults",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parseResults",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/index.ts:parseStart",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parseStart",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "performance.now()"
  },
  {
    "nodeId": "self:Variable:src/index.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await this.queryExecutor.executeQuery(`\n      MATCH (source:Node)-[r {isCrossCodebase: true}]->(target:Node)\n      WITH source.codebaseId AS sourceCodebase, target.codebaseId AS targetCodebase, count(*) AS relationshipCount\n      RETURN sourceCodebase, targetCodebase, relationshipCount\n      ORDER BY relationshipCount DESC\n    `)"
  },
  {
    "nodeId": "self:Variable:src/index.ts:resolveStart",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "resolveStart",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "performance.now()"
  },
  {
    "nodeId": "self:Variable:src/index.ts:transformStart",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformStart",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "performance.now()"
  },
  {
    "nodeId": "self:Variable:src/index.ts:transformResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "transformResult",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.transformer.transform(parseResults)"
  },
  {
    "nodeId": "self:Variable:src/index.ts:isValid",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isValid",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.transformer.validate(transformResult)"
  },
  {
    "nodeId": "self:Variable:src/index.ts:{ nodes, relationships }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ nodes, relationships }",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "transformResult"
  },
  {
    "nodeId": "self:Variable:src/index.ts:packageStart",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageStart",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "performance.now()"
  },
  {
    "nodeId": "self:Variable:src/index.ts:packageResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageResult",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.packageParser.parseAllPackageJsonFiles(nodes, relationships)"
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.findSourceFiles",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findSourceFiles",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Find all TypeScript and Vue files in a directory\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:findSourceFiles:dir",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "dir",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/index.ts:files",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "files",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/index.ts:walk",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "walk",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "(directory: string) => {\n      const entries = fs.readdirSync(directory, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(directory, entry.name);\n        \n        if (entry.isDirectory()) {\n          // Skip node_modules and other common directories to ignore\n          if (entry.name !== 'node_modules' && entry.name !== 'dist' && !entry.name.startsWith('.')) {\n            walk(fullPath);\n          }\n        } else if (entry.isFile()) {\n          // Check for TypeScript files\n          if ((entry.name.endsWith('.ts') || entry.name.endsWith('.tsx')) && !entry.name.endsWith('.d.ts')) {\n            files.push(fullPath);\n          }\n          // Check for Vue files\n          else if (entry.name.endsWith('.vue')) {\n            files.push(fullPath);\n          }\n        }\n      }\n    }"
  },
  {
    "nodeId": "self:Variable:src/index.ts:entries",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "entries",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.readdirSync(directory, { withFileTypes: true })"
  },
  {
    "nodeId": "self:Variable:src/index.ts:fullPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fullPath",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(directory, entry.name)"
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.saveResults",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "saveResults",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Save the extracted nodes and relationships to files\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:saveResults:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:saveResults:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/index.ts:nodesPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodesPath",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(this.config.outputDir, 'nodes.json')"
  },
  {
    "nodeId": "self:Variable:src/index.ts:relationshipsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsPath",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(this.config.outputDir, 'relationships.json')"
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.importToNeo4j",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importToNeo4j",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import the extracted nodes and relationships to Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:importToNeo4j:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:importToNeo4j:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/index.ts:importer",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importer",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Neo4jImporter({\n      uri: this.config.neo4j.uri,\n      username: this.config.neo4j.username,\n      password: this.config.neo4j.password,\n      database: this.config.neo4j.database,\n      batchSize: 500 // Smaller batch size for better progress feedback\n    })"
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.resolveComponentReferences",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "resolveComponentReferences",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Build a component registry and resolve component references\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:resolveComponentReferences:parseResults",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parseResults",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/index.ts:componentRegistry",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "componentRegistry",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, string>()"
  },
  {
    "nodeId": "self:Variable:src/index.ts:componentName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "componentName",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationship.endNodeId"
  },
  {
    "nodeId": "self:Variable:src/index.ts:resolvedNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "resolvedNodeId",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "componentRegistry.get(componentName)"
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.executeQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeQuery",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query against the Neo4j database\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:executeQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:executeQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.executeCodebaseScopedQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeCodebaseScopedQuery",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query scoped to this codebase\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:executeCodebaseScopedQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:executeCodebaseScopedQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.executeCrossCodebaseQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeCrossCodebaseQuery",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query that spans multiple codebases\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:executeCrossCodebaseQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/index.ts:executeCrossCodebaseQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.close",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "close",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Close all connections\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.listCodebases",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "listCodebases",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Get information about all codebases in the database\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.findCrossCodebaseRelationships",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findCrossCodebaseRelationships",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Find cross-codebase relationships\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/index.ts:TSCodeGraph.findCodebaseDependencies",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findCodebaseDependencies",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Find dependencies between codebases\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Function:src/index.ts:main",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "main",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Command-line interface for the TypeScript codebase to Neo4j graph system\n */",
    "parameterCount": 0,
    "isExported": false,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:src/index.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "process.argv.slice(2)"
  },
  {
    "nodeId": "self:Variable:src/index.ts:rootDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "rootDir",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.resolve(args[0])"
  },
  {
    "nodeId": "self:Variable:src/index.ts:outputDir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "outputDir",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[1] ? path.resolve(args[1]) : path.join(process.cwd(), 'output')"
  },
  {
    "nodeId": "self:Variable:src/index.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "args[2] || path.basename(rootDir)"
  },
  {
    "nodeId": "self:Variable:src/index.ts:config",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Config",
    "initializer": "{\n    rootDir,\n    outputDir,\n    codebaseId\n  }"
  },
  {
    "nodeId": "self:Variable:src/index.ts:codeGraph",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codeGraph",
    "file": "src/index.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new TSCodeGraph(config)"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/neo4j/importer.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/importer.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/importer.ts",
    "name": "importer.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 889,
    "size": 30991,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/neo4j/importer.ts:Neo4jImporterConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Neo4jImporterConfig",
    "file": "src/neo4j/importer.ts",
    "startLine": 12,
    "endLine": 21,
    "description": "/**\n * Configuration for the Neo4j importer\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/importer.ts:Neo4jImporterConfig.uri",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "uri",
    "typeString": "string",
    "description": "/**\n   * Neo4j connection URI\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/importer.ts:Neo4jImporterConfig.username",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "username",
    "typeString": "string",
    "description": "/**\n   * Neo4j username\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/importer.ts:Neo4jImporterConfig.password",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "password",
    "typeString": "string",
    "description": "/**\n   * Neo4j password\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/importer.ts:Neo4jImporterConfig.database",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "database",
    "typeString": "string",
    "description": "/**\n   * Neo4j database name (optional)\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/importer.ts:Neo4jImporterConfig.batchSize",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "batchSize",
    "typeString": "number",
    "description": "/**\n   * Batch size for imports (default: 1000)\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/importer.ts:Neo4jImporterConfig.migration",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "migration",
    "typeString": "{\n    /**\n     * Whether to automatically migrate schema on import (default: true)\n     */\n    autoMigrate?: boolean;\n    \n    /**\n     * Whether to back up data before migration (default: false)\n     */\n    backupBeforeMigration?: boolean;\n  }",
    "description": "/**\n   * Schema migration configuration (optional)\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:Class:src/neo4j/importer.ts:Neo4jImporter",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "Neo4jImporter",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Importer for Neo4j graph database\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 16,
    "propertyCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/neo4j/importer.ts:Neo4jImporter.driver",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "driver",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Driver",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/neo4j/importer.ts:Neo4jImporter.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Neo4jImporterConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.import",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "import",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Import nodes and relationships into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:import:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:import:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:session",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:verifySession",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "verifySession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:verified",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "verified",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await verifySchemaConstraints(verifySession)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:migrationSession",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "migrationSession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:migrationNeeded",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "migrationNeeded",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await SchemaMigration.isMigrationNeeded(migrationSession)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:migrationResults",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "migrationResults",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await SchemaMigration.migrateAllToCurrentVersion(migrationSession)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "record.get('codebaseId')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:codebaseSession",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseSession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.importNodes",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importNodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import nodes into Neo4j in batches\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:importNodes:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:batchSize",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batchSize",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.config.batchSize || 1000"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:batches",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batches",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Math.ceil(relationships.length / batchSize)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:start",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "start",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "i * batchSize"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:end",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "end",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Math.min(start + batchSize, relationships.length)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:batch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "batch",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationships.slice(start, end)"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.importNodeBatch",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importNodeBatch",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import a batch of nodes into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:importNodeBatch:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:createNodesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "createNodesResult",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n        UNWIND $nodeIds AS nodeId\n        MERGE (n:Node {nodeId: nodeId})\n        RETURN count(n) AS count\n      `, {\n        nodeIds: nodes.map(node => node.nodeId)\n      })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:processedCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "processedCount",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:prepared",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "prepared",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.prepareRelationshipForImport(rel)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:safeProps",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "safeProps",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, any>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:value",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "value",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relProperties[key]"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.importRelationships",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importRelationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import relationships into Neo4j in batches\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:importRelationships:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:typeCounts",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeCounts",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, number>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:defineVueComponentRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "defineVueComponentRel",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationships.find(rel => rel.type === 'DEFINES_VUE_COMPONENT')"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.importRelationshipBatch",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "importRelationshipBatch",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Import a batch of relationships into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:importRelationshipBatch:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:relationshipsByType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsByType",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.groupRelationshipsByType(relationships)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:totalCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "totalCount",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:resolvedRels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "resolvedRels",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rels.filter(rel =>\n          !rel.unresolvedComponent && !rel.unresolvedComposable && !rel.unresolvedImport)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:unresolvedRels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "unresolvedRels",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rels.filter(rel =>\n          rel.unresolvedComponent || rel.unresolvedComposable || rel.unresolvedImport)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:count",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "count",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n        MATCH (i:Insight)\n        WHERE NOT (i)-[:BELONGS_TO]->(:Codebase)\n        RETURN i.nodeId AS insightId, i.codebaseId AS codebaseId\n      `)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:nodeType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeType",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "'UnresolvedReference'"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:nodeName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeName",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "rel.endNodeId"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:createNodeQuery",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "createNodeQuery",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n                MERGE (n:Node:${nodeType} {nodeId: $nodeId})\n                ON CREATE SET n += $properties\n                RETURN n\n              `"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:safeNodeProps",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "safeNodeProps",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n                nodeId: `${rel.codebaseId}:${nodeType}:${nodeName}`,\n                name: nodeName,\n                codebaseId: rel.codebaseId,\n                labels: [nodeType, 'Node'],\n                _schemaVersion: rel._schemaVersion || '2.0.0',\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n              }"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:createRelQuery",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "createRelQuery",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n                MATCH (start:Node {nodeId: $startNodeId})\n                MATCH (end:Node {nodeId: $endNodeId})\n                MERGE (start)-[r:\\`${relType}\\`]->(end)\n                ON CREATE SET r += $properties, r.nodeId = $relNodeId\n                ON MATCH SET r += $properties\n                RETURN r\n              `"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:relProperties",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relProperties",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.prepareRelationshipPropertiesForImport(rel)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:safeRelProps",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "safeRelProps",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, any>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.groupRelationshipsByType",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "groupRelationshipsByType",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Group relationships by type for batch processing\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:groupRelationshipsByType:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:groups",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "groups",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, Relationship[]>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.prepareNodeForImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "prepareNodeForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Prepare a node for import into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:prepareNodeForImport:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:{ labels: originalLabels, ...nodeProperties }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ labels: originalLabels, ...nodeProperties }",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:labels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labels",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[...originalLabels]"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:processedProperties",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "processedProperties",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.convertComplexPropertiesToPrimitives(properties)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:originalNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "originalNodeId",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.nodeId"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:nodeWithVersion",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeWithVersion",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      ...processedProperties,\n      _schemaVersion: SCHEMA_VERSION,\n      _labels: labels\n    }"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.prepareRelationshipForImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "prepareRelationshipForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Prepare a relationship for import into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:prepareRelationshipForImport:relationship",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationship",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:relForImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...relationship }"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:{ type, startNodeId, endNodeId, unresolvedComponent, unresolvedComposable, unresolvedImport, ...properties }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ type, startNodeId, endNodeId, unresolvedComponent, unresolvedComposable, unresolvedImport, ...properties }",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relForImport"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:propertiesWithVersion",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propertiesWithVersion",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      ...processedProperties,\n      _schemaVersion: SCHEMA_VERSION\n    }"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.prepareRelationshipPropertiesForImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "prepareRelationshipPropertiesForImport",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Prepare relationship properties for import into Neo4j\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:prepareRelationshipPropertiesForImport:relationship",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationship",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.convertComplexPropertiesToPrimitives",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "convertComplexPropertiesToPrimitives",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Convert complex properties to primitives for Neo4j compatibility\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:convertComplexPropertiesToPrimitives:obj",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "obj",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:mapObj",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "mapObj",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, any>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.checkForMapObjects",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "checkForMapObjects",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check for Map objects in a nested object structure\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:checkForMapObjects:obj",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "obj",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/importer.ts:checkForMapObjects:path",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "path",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.updateNodeProperties",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "updateNodeProperties",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Update node properties based on their relationships\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:codebaseResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "codebaseResult",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n        MATCH (n:Node)\n        RETURN n.codebaseId AS codebaseId\n        LIMIT 1\n      `)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:importCountResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importCountResult",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n        MATCH (f:File {codebaseId: $codebaseId})-[r:IMPORTS]->()\n        WITH f, count(r) AS importCount\n        SET f.importCount = importCount\n        RETURN count(f) AS updatedNodes\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:exportCountResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "exportCountResult",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n        MATCH (f:File {codebaseId: $codebaseId})-[r:EXPORTS_LOCAL]->()\n        WITH f, count(r) AS exportCount\n        SET f.exportCount = exportCount\n        RETURN count(f) AS updatedNodes\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:crossCodebaseImportResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "crossCodebaseImportResult",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n        MATCH (f:File {codebaseId: $codebaseId})-[r:IMPORTS]->(target)\n        WHERE target.codebaseId <> $codebaseId\n        WITH f, count(r) AS crossImportCount\n        SET f.crossCodebaseImportCount = crossImportCount\n        RETURN count(f) AS updatedNodes\n      `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:importNodesUpdated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importNodesUpdated",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "importCountResult.records[0].get('updatedNodes').toNumber()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:exportNodesUpdated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "exportNodesUpdated",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "exportCountResult.records[0].get('updatedNodes').toNumber()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:crossImportNodesUpdated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "crossImportNodesUpdated",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "crossCodebaseImportResult.records[0].get('updatedNodes').toNumber()"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.getLabelsParam",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getLabelsParam",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get a Cypher parameter for setting labels\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.getSession",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getSession",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get a Neo4j session\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.linkInsightsToCodebases",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "linkInsightsToCodebases",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Links existing Insight nodes to their respective Codebase nodes\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:insightId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "insightId",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get('insightId')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/importer.ts:parts",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parts",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "insightId.split(':')"
  },
  {
    "nodeId": "self:Method:src/neo4j/importer.ts:Neo4jImporter.close",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "close",
    "file": "src/neo4j/importer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Close the Neo4j driver\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/neo4j/query-executor.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/query-executor.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/query-executor.ts",
    "name": "query-executor.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 452,
    "size": 11735,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/neo4j/query-executor.ts:QueryResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "QueryResult",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 4,
    "endLine": 21,
    "description": "/**\n * Result of a Neo4j query\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryResult.records",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "records",
    "typeString": "any[]",
    "description": "/**\n   * Records returned by the query\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryResult.summary",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "summary",
    "typeString": "{\n    /**\n     * Query execution time in milliseconds\n     */\n    executionTime: number;\n    \n    /**\n     * Number of records returned\n     */\n    recordCount: number;\n    \n    /**\n     * Whether the query was successful\n     */\n    success: boolean;\n    \n    /**\n     * Query statistics\n     */\n    stats: {\n      /**\n       * Number of nodes created\n       */\n      nodesCreated: number;\n      \n      /**\n       * Number of nodes deleted\n       */\n      nodesDeleted: number;\n      \n      /**\n       * Number of relationships created\n       */\n      relationshipsCreated: number;\n      \n      /**\n       * Number of relationships deleted\n       */\n      relationshipsDeleted: number;\n      \n      /**\n       * Number of properties set\n       */\n      propertiesSet: number;\n      \n      /**\n       * Number of labels added\n       */\n      labelsAdded: number;\n      \n      /**\n       * Number of labels removed\n       */\n      labelsRemoved: number;\n    };\n  }",
    "description": "/**\n   * Summary of the query execution\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/neo4j/query-executor.ts:QueryExecutorConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "QueryExecutorConfig",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Configuration for the Neo4j query executor\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryExecutorConfig.uri",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "uri",
    "typeString": "string",
    "description": "/**\n   * Neo4j connection URI\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryExecutorConfig.username",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "username",
    "typeString": "string",
    "description": "/**\n   * Neo4j username\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryExecutorConfig.password",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "password",
    "typeString": "string",
    "description": "/**\n   * Neo4j password\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryExecutorConfig.database",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "database",
    "typeString": "string",
    "description": "/**\n   * Neo4j database name (optional)\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryExecutorConfig.defaultTimeout",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "defaultTimeout",
    "typeString": "number",
    "description": "/**\n   * Default timeout for queries in milliseconds (default: 30000)\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/query-executor.ts:QueryExecutorConfig.defaultCodebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "defaultCodebaseId",
    "typeString": "string",
    "description": "/**\n   * Default codebase ID to use for queries (optional)\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:Class:src/neo4j/query-executor.ts:QueryExecutor",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "QueryExecutor",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Executor for Neo4j Cypher queries\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 8,
    "propertyCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/neo4j/query-executor.ts:QueryExecutor.driver",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "driver",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Driver",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/neo4j/query-executor.ts:QueryExecutor.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "QueryExecutorConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.executeQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeQuery",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": true,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeQuery:timeout",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "timeout",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": true,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:session",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getSession()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:startTime",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "startTime",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Date.now()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:txConfig",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "txConfig",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n        timeout: timeout || this.config.defaultTimeout\n      }"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, any>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:executionTime",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "executionTime",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Date.now() - startTime"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:records",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "records",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records.map(record => this.recordToObject(record))"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:stats",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "stats",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.summary.counters.updates()"
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.executeTransaction",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeTransaction",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query in a transaction\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": true,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeTransaction:queries",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "queries",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "{ cypher: string; parameters?: Record<string, any> }[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeTransaction:timeout",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "timeout",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": true,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:results",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "results",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "QueryResult[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:tx",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tx",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "session.beginTransaction(txConfig)"
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.recordToObject",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "recordToObject",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Convert a Neo4j record to a plain object\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:recordToObject:record",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "record",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Neo4jRecord",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:value",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "value",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get(key)"
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.convertNeo4jValue",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "convertNeo4jValue",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Convert a Neo4j value to a plain JavaScript value\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:convertNeo4jValue:value",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "value",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.getSession",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getSession",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get a Neo4j session\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.close",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "close",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Close the Neo4j driver\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.executeCodebaseScopedQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeCodebaseScopedQuery",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query scoped to a specific codebase\n   *\n   * This method automatically adds codebase filtering to the query\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 4,
    "hasRestParameter": false,
    "hasOptionalParameters": true,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCodebaseScopedQuery:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCodebaseScopedQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCodebaseScopedQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCodebaseScopedQuery:timeout",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "timeout",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 3,
    "isOptional": true,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:paramsWithCodebase",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "paramsWithCodebase",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      ...parameters,\n      codebaseId,\n      nodeIdPrefix: `${codebaseId}:` // Add nodeIdPrefix for matching node IDs that start with codebaseId:\n    }"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:hasWhere",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasWhere",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "/\\bWHERE\\b/i.test(cypher)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:scopedCypher",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "scopedCypher",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "cypher"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:parts",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parts",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodePattern.split(':')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:varName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "varName",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "parts[0].trim()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/query-executor.ts:labels",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labels",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "parts.slice(1).join(':')"
  },
  {
    "nodeId": "self:Method:src/neo4j/query-executor.ts:QueryExecutor.executeCrossCodebaseQuery",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "executeCrossCodebaseQuery",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Execute a Cypher query that spans multiple codebases\n   *\n   * This method allows explicit cross-codebase queries\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": true,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCrossCodebaseQuery:cypher",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "cypher",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCrossCodebaseQuery:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Record<string, any>",
    "initializer": "{}",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/query-executor.ts:executeCrossCodebaseQuery:timeout",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "timeout",
    "file": "src/neo4j/query-executor.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": true,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/neo4j/schema-constraints.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/schema-constraints.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/schema-constraints.ts",
    "name": "schema-constraints.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 340,
    "size": 12877,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:src/neo4j/schema-constraints.ts:createSchemaConstraints",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "createSchemaConstraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 5,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Creates Neo4j schema constraints and indexes for the TypeScript code graph\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:createSchemaConstraints:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 9,
    "endLine": 9,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:query",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "query",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`\n          CALL db.index.fulltext.createNodeIndex(\n            '${ftIndex.name}',\n            [${ftIndex.labels.map(label => `'${label}'`).join(', ')}],\n            [${ftIndex.properties.map(prop => `'${prop}'`).join(', ')}]\n          )\n        `"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:fullTextIndexAvailable",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fullTextIndexAvailable",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:proceduresResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "proceduresResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(\"CALL dbms.procedures() YIELD name WHERE name = 'db.index.fulltext.createNodeIndex' RETURN count(*) > 0 as available\")"
  },
  {
    "nodeId": "self:Function:src/neo4j/schema-constraints.ts:dropSchemaConstraints",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "dropSchemaConstraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Drops all Neo4j schema constraints and indexes for the TypeScript code graph\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:dropSchemaConstraints:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:constraintsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraintsResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run('SHOW CONSTRAINTS')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:name",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "name",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get('name')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:indexesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "indexesResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run('SHOW INDEXES')"
  },
  {
    "nodeId": "self:Function:src/neo4j/schema-constraints.ts:createCodebaseSchema",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "createCodebaseSchema",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Creates Neo4j schema constraints and indexes for a specific codebase\n */",
    "parameterCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:createCodebaseSchema:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:createCodebaseSchema:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:commonNodeTypes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "commonNodeTypes",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "['File', 'Class', 'Function', 'Variable', 'Component']"
  },
  {
    "nodeId": "self:Function:src/neo4j/schema-constraints.ts:dropCodebaseSchema",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "dropCodebaseSchema",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Drops Neo4j schema constraints and indexes for a specific codebase\n */",
    "parameterCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:dropCodebaseSchema:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:dropCodebaseSchema:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:labelsAndProperties",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labelsAndProperties",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "record.get('labelsOrTypes') + '.' + record.get('properties')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:deleteResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deleteResult",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await session.run(`\n      MATCH (n:Node {codebaseId: $codebaseId})\n      DETACH DELETE n\n      RETURN count(n) as deletedCount\n    `, { codebaseId })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:deletedCount",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "deletedCount",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "deleteResult.records[0].get('deletedCount').toNumber()"
  },
  {
    "nodeId": "self:Function:src/neo4j/schema-constraints.ts:verifySchemaConstraints",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "verifySchemaConstraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "description": "/**\n * Verifies that the Neo4j schema constraints and indexes are correctly set up\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-constraints.ts:verifySchemaConstraints:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:sampleRecord",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sampleRecord",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintsResult.records[0]"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:constraints",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraints",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintsResult.records.map(record => ({\n      name: record.get('name'),\n      label: record.get('labelsOrTypes'),\n      property: record.get('properties'),\n      type: record.get('type')\n    }))"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:indexes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "indexes",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "indexesResult.records.map(record => ({\n      name: record.get('name'),\n      label: record.get('labelsOrTypes'),\n      property: record.get('properties'),\n      type: record.get('type')\n    }))"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:found",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "found",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "indexes.some(index =>\n          index.name === requiredFTIndex.name &&\n          index.type.includes('FULLTEXT')\n        )"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:constraintLabel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraintLabel",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Array.isArray(constraint.label) ? constraint.label[0] : constraint.label"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:constraintProperty",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "constraintProperty",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "Array.isArray(constraint.property) ? constraint.property[0] : constraint.property"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:labelMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "labelMatch",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintLabel === requiredConstraint.label"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:propertyMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propertyMatch",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraintProperty === requiredConstraint.property"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-constraints.ts:typeMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeMatch",
    "file": "src/neo4j/schema-constraints.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "constraint.type === requiredConstraint.type"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/neo4j/schema-migration.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/neo4j/schema-migration.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/neo4j/schema-migration.ts",
    "name": "schema-migration.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 229,
    "size": 6992,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/neo4j/schema-migration.ts:SchemaMigrationConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "SchemaMigrationConfig",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 5,
    "endLine": 12,
    "description": "/**\n * Schema migration configuration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/schema-migration.ts:SchemaMigrationConfig.autoMigrate",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "autoMigrate",
    "typeString": "boolean",
    "description": "/**\n   * Whether to automatically migrate schema on import\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/schema-migration.ts:SchemaMigrationConfig.backupBeforeMigration",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "backupBeforeMigration",
    "typeString": "boolean",
    "description": "/**\n   * Whether to back up data before migration\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/neo4j/schema-migration.ts:MigrationResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "MigrationResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 12,
    "endLine": 20,
    "description": "/**\n * Schema migration result\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/schema-migration.ts:MigrationResult.success",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "success",
    "typeString": "boolean",
    "description": "/**\n   * Whether the migration was successful\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/schema-migration.ts:MigrationResult.nodesMigrated",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodesMigrated",
    "typeString": "number",
    "description": "/**\n   * Number of nodes migrated\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/schema-migration.ts:MigrationResult.relationshipsMigrated",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "relationshipsMigrated",
    "typeString": "number",
    "description": "/**\n   * Number of relationships migrated\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/neo4j/schema-migration.ts:MigrationResult.error",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "error",
    "typeString": "string",
    "description": "/**\n   * Error message if migration failed\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:Class:src/neo4j/schema-migration.ts:SchemaMigration",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "SchemaMigration",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Handles schema migrations between different versions\n */",
    "isGeneric": false,
    "hasConstructor": false,
    "methodCount": 5,
    "propertyCount": 0,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/schema-migration.ts:SchemaMigration.isMigrationNeeded",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isMigrationNeeded",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Check if schema migration is needed\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:isMigrationNeeded:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await this.migrateSchema(session, version)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:count",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "count",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.records[0].get('count').toNumber()"
  },
  {
    "nodeId": "self:Method:src/neo4j/schema-migration.ts:SchemaMigration.getCurrentVersions",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getCurrentVersions",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Get current schema versions in the database\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:getCurrentVersions:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/neo4j/schema-migration.ts:SchemaMigration.migrateSchema",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "migrateSchema",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Migrate schema from one version to another\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:migrateSchema:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:migrateSchema:fromVersion",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fromVersion",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:migrateSchema:toVersion",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "toVersion",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "initializer": "SCHEMA_VERSION",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:tx",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tx",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "session.beginTransaction()"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:nodesMigrated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodesMigrated",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:relationshipsMigrated",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsMigrated",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "0"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:nodeLabelResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeLabelResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH (n)\n            WHERE n._schemaVersion = $fromVersion\n              AND (n:Class OR n:Interface OR n:Function OR n:Method OR n:Property OR n:Variable OR n:Parameter)\n              AND NOT n:CodeElement\n            SET n:CodeElement, n._schemaVersion = $toVersion, n.updatedAt = datetime()\n            RETURN count(n) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:relResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH ()-[r]->()\n            WHERE r._schemaVersion = $fromVersion\n            SET r._schemaVersion = $toVersion, r.updatedAt = datetime()\n            RETURN count(r) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:remainingNodesResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "remainingNodesResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH (n)\n            WHERE n._schemaVersion = $fromVersion\n            SET n._schemaVersion = $toVersion, n.updatedAt = datetime()\n            RETURN count(n) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:nodeResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeResult",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await tx.run(`\n            MATCH (n)\n            WHERE n._schemaVersion = $fromVersion\n            SET n._schemaVersion = $toVersion, n.updatedAt = datetime()\n            RETURN count(n) AS count\n          `, { fromVersion, toVersion })"
  },
  {
    "nodeId": "self:Method:src/neo4j/schema-migration.ts:SchemaMigration.migrateAllToCurrentVersion",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "migrateAllToCurrentVersion",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Migrate all schema versions to the current version\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:migrateAllToCurrentVersion:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:versions",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "versions",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "await this.getCurrentVersions(session)"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:results",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "results",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "MigrationResult[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Method:src/neo4j/schema-migration.ts:SchemaMigration.createBackup",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "createBackup",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": true,
    "isStatic": true,
    "visibility": "public",
    "description": "/**\n   * Create a backup of the database before migration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:createBackup:session",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "session",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Session",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/neo4j/schema-migration.ts:createBackup:backupName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "backupName",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:timestamp",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "timestamp",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Date().toISOString().replace(/[:.]/g, '-')"
  },
  {
    "nodeId": "self:Variable:src/neo4j/schema-migration.ts:backupFileName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "backupFileName",
    "file": "src/neo4j/schema-migration.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`${backupName}_${timestamp}`"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/parser/package-parser.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/parser/package-parser.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/parser/package-parser.ts",
    "name": "package-parser.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 483,
    "size": 16501,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/parser/package-parser.ts:PackageParserConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "PackageParserConfig",
    "file": "src/parser/package-parser.ts",
    "startLine": 5,
    "endLine": 9,
    "description": "/**\n * Configuration for the package parser\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/package-parser.ts:PackageParserConfig.rootDir",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "rootDir",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/package-parser.ts:PackageParserConfig.codebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "codebaseId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Class:src/parser/package-parser.ts:PackageParser",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "PackageParser",
    "file": "src/parser/package-parser.ts",
    "startLine": 10,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Parser for package.json files\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 6,
    "propertyCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/package-parser.ts:PackageParser.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/parser/package-parser.ts",
    "startLine": 10,
    "endLine": 11,
    "isStatic": false,
    "visibility": "private",
    "typeString": "PackageParserConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/package-parser.ts:PackageParser.packageCache",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "packageCache",
    "file": "src/parser/package-parser.ts",
    "startLine": 11,
    "endLine": 12,
    "isStatic": false,
    "visibility": "private",
    "typeString": "Map<string, any>",
    "initializer": "new Map()",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/package-parser.ts:PackageParser.findPackageJsonFiles",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findPackageJsonFiles",
    "file": "src/parser/package-parser.ts",
    "startLine": 17,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Find all package.json files in the project\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 0,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageJsonFiles",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageJsonFiles",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.findPackageJsonFiles()"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:walk",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "walk",
    "file": "src/parser/package-parser.ts",
    "startLine": 19,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "(directory: string) => {\n      const entries = fs.readdirSync(directory, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(directory, entry.name);\n        \n        if (entry.isDirectory()) {\n          // Skip node_modules and other common directories to ignore\n          if (entry.name !== 'node_modules' && entry.name !== 'dist' && !entry.name.startsWith('.')) {\n            walk(fullPath);\n          }\n        } else if (entry.isFile() && entry.name === 'package.json') {\n          packageJsonFiles.push(fullPath);\n        }\n      }\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:entries",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "entries",
    "file": "src/parser/package-parser.ts",
    "startLine": 20,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.readdirSync(directory, { withFileTypes: true })"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:fullPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fullPath",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.join(directory, entry.name)"
  },
  {
    "nodeId": "self:Method:src/parser/package-parser.ts:PackageParser.parsePackageJson",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parsePackageJson",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Parse a package.json file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:parsePackageJson:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:content",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "content",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.readFileSync(filePath, 'utf8')"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageJson",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageJson",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "JSON.parse(content)"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageNode",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n        nodeId: `${this.config.codebaseId}:package:${packageJson.name || path.basename(path.dirname(filePath))}`,\n        name: packageJson.name || path.basename(path.dirname(filePath)),\n        path: path.relative(this.config.rootDir, filePath),\n        absolutePath: filePath,\n        version: packageJson.version,\n        description: packageJson.description,\n        author: typeof packageJson.author === 'string' ? packageJson.author : \n                packageJson.author ? JSON.stringify(packageJson.author) : undefined,\n        license: packageJson.license,\n        dependencies: packageJson.dependencies || {},\n        devDependencies: packageJson.devDependencies || {},\n        peerDependencies: packageJson.peerDependencies || {},\n        isLocal: true,\n        codebaseId: this.config.codebaseId,\n        labels: ['Package', 'Node']\n      }"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:dependencies",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependencies",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.parseDependencies(packageJson, filePath)"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.parsePackageJson(filePath)"
  },
  {
    "nodeId": "self:Method:src/parser/package-parser.ts:PackageParser.parseDependencies",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseDependencies",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Parse dependencies from a package.json file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:parseDependencies:packageJson",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "packageJson",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:parseDependencies:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:nodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "any[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:relationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "any[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageName",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "rel.packageName"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageNodeId",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "packageMap.get(dep.name)"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:depNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "depNodeId",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "dependencyMap.get(packageName)"
  },
  {
    "nodeId": "self:Method:src/parser/package-parser.ts:PackageParser.parseAllPackageJsonFiles",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseAllPackageJsonFiles",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Parse all package.json files in the project\n   * @param existingNodes Existing nodes from the TS parser\n   * @param existingRelationships Existing relationships from the TS parser\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:parseAllPackageJsonFiles:existingNodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "existingNodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "initializer": "[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:parseAllPackageJsonFiles:existingRelationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "existingRelationships",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "initializer": "[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:allNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "allNodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "any[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:allRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "allRelationships",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "any[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:combinedNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "combinedNodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[...existingNodes, ...allNodes]"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:combinedRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "combinedRelationships",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[...existingRelationships, ...allRelationships]"
  },
  {
    "nodeId": "self:Method:src/parser/package-parser.ts:PackageParser.linkDependenciesToImports",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "linkDependenciesToImports",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Link dependencies to imports\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:linkDependenciesToImports:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:linkDependenciesToImports:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:dependencyNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependencyNodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodes.filter(node =>\n      node.labels &&\n      node.labels.includes('Dependency')\n    )"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageNodes",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodes.filter(node =>\n      node.labels &&\n      node.labels.includes('Package') &&\n      !node.labels.includes('Dependency')\n    )"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:dependencyMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependencyMap",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, string>()"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:builtInModules",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "builtInModules",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[\n      'fs', 'path', 'os', 'util', 'http', 'https', 'net', 'crypto', 'events',\n      'stream', 'buffer', 'querystring', 'url', 'zlib', 'child_process',\n      'cluster', 'dgram', 'dns', 'domain', 'readline', 'string_decoder',\n      'tls', 'tty', 'vm', 'assert', 'console', 'process', 'timers'\n    ]"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:depNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "depNode",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n          nodeId: depNodeId,\n          name: moduleName,\n          version: 'built-in',\n          isDevDependency: false,\n          isPeerDependency: false,\n          isOptionalDependency: false,\n          isDirectDependency: true,\n          isTransitiveDependency: false,\n          isBuiltIn: true,\n          codebaseId: this.config.codebaseId,\n          labels: ['Dependency', 'Node', 'Package', 'BuiltInModule']\n        }"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:packageMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "packageMap",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, string>()"
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:importRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importRelationships",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationships.filter(rel =>\n      rel.type === 'IMPORTS_FROM_PACKAGE'\n    )"
  },
  {
    "nodeId": "self:Method:src/parser/package-parser.ts:PackageParser.extractPackageNameFromImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractPackageNameFromImport",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract the package name from an import path\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/package-parser.ts:extractPackageNameFromImport:importPath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "importPath",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/package-parser.ts:parts",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parts",
    "file": "src/parser/package-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "importPath.split('/')"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/parser/ts-parser.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/parser/ts-parser.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/parser/ts-parser.ts",
    "name": "ts-parser.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 1482,
    "size": 53964,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/parser/ts-parser.ts:ClassImplements",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ClassImplements",
    "file": "src/parser/ts-parser.ts",
    "startLine": 17,
    "endLine": 19,
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:ClassImplements.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPLEMENTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:ClassImplements.isPartial",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPartial",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:ClassImplements.typeArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/parser/ts-parser.ts:TSParserOptions",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TSParserOptions",
    "file": "src/parser/ts-parser.ts",
    "startLine": 20,
    "endLine": 21,
    "description": "/**\n * Configuration options for the TypeScript parser\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:TSParserOptions.rootDir",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "rootDir",
    "typeString": "string",
    "description": "/**\n   * Root directory of the codebase\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:TSParserOptions.codebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "codebaseId",
    "typeString": "string",
    "description": "/**\n   * Unique identifier for the codebase\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:TSParserOptions.compilerOptions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "compilerOptions",
    "typeString": "ts.CompilerOptions",
    "description": "/**\n   * TypeScript compiler options\n   */",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/parser/ts-parser.ts:ParseResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ParseResult",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Result of parsing a TypeScript file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:ParseResult.nodes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodes",
    "typeString": "Node[]",
    "description": "/**\n   * Nodes extracted from the file\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/ts-parser.ts:ParseResult.relationships",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "relationships",
    "typeString": "Relationship[]",
    "description": "/**\n   * Relationships extracted from the file\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Class:src/parser/ts-parser.ts:TSParser",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "TSParser",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Parser for TypeScript files using the TypeScript Compiler API\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 42,
    "propertyCount": 5,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/ts-parser.ts:TSParser.rootDir",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "rootDir",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "string",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/ts-parser.ts:TSParser.codebaseId",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "string",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/ts-parser.ts:TSParser.compilerOptions",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "compilerOptions",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "ts.CompilerOptions",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/ts-parser.ts:TSParser.program",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "program",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "ts.Program | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/ts-parser.ts:TSParser.typeChecker",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "typeChecker",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "ts.TypeChecker | null",
    "initializer": "null",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.initialize",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "initialize",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Initialize the TypeScript program and type checker\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:initialize:filePaths",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePaths",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.parseFile",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Parse a TypeScript file and extract nodes and relationships\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:parseFile:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:sourceFile",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sourceFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "declaration.getSourceFile()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ParseResult",
    "initializer": "{\n      nodes: [],\n      relationships: []\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:fileNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "File",
    "initializer": "{\n      nodeId: this.generateNodeId('File', filePath),\n      codebaseId: this.codebaseId,\n      labels: ['File'],\n      path: path.relative(this.rootDir, filePath),\n      absolutePath: filePath,\n      name: path.basename(filePath),\n      extension: path.extname(filePath).substring(1),\n      language: 'typescript',\n      lineCount: sourceFile.getLineAndCharacterOfPosition(sourceFile.end).line + 1,\n      size: this.getFileSize(filePath),\n      hasDefaultExport: this.hasDefaultExport(sourceFile),\n      defaultExportExpression: this.getDefaultExportExpression(sourceFile),\n      hasNamedExports: false, // Will need to be updated with actual logic\n      namedExports: [],\n      hasCommonJSExport: false, // Will need to be updated with actual logic\n      importCount: 0, // Will need to be updated with actual logic\n      exportCount: 0 // Will need to be updated with actual logic\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.visitNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "visitNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Visit a TypeScript AST node and extract information\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:visitNode:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:visitNode:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:visitNode:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractClass",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractClass",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract class information from a class declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractClass:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.ClassDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractClass:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractClass:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:name",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "name",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "declaration.name ? declaration.name.getText() : 'anonymous'"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:classNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "classNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Class",
    "initializer": "{\n      nodeId: this.generateNodeId('Class', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Class'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isAbstract: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AbstractKeyword) || false,\n      description: this.getJsDocComment(node),\n      isGeneric: !!node.typeParameters && node.typeParameters.length > 0,\n      hasConstructor: node.members.some(m => ts.isConstructorDeclaration(m)),\n      methodCount: node.members.filter(m => ts.isMethodDeclaration(m)).length,\n      propertyCount: node.members.filter(m => ts.isPropertyDeclaration(m)).length,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false,\n      hasDecorators: false // Simplified implementation\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:baseClassName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "baseClassName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "type.expression.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:baseClassNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "baseClassNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.resolveTypeNodeId(type.expression, 'Class', fileNode.path)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:extendsRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "extendsRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Extends",
    "initializer": "{\n                nodeId: this.generateNodeId('EXTENDS', `${classNode.nodeId}->${baseClassNodeId}`),\n                codebaseId: this.codebaseId,\n                type: 'EXTENDS',\n                startNodeId: classNode.nodeId,\n                endNodeId: baseClassNodeId,\n                isDirectExtension: true,\n                inheritanceLevel: 1,\n                typeArguments: type.typeArguments ? type.typeArguments.map(t => t.getText()) : undefined\n              }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:interfaceName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "interfaceName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "type.expression.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:interfaceNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "interfaceNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.resolveTypeNodeId(type.expression, 'Interface', fileNode.path)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:implementsRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "implementsRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ClassImplements",
    "initializer": "{\n                nodeId: this.generateNodeId('IMPLEMENTS', `${classNode.nodeId}->${interfaceNodeId}`),\n                codebaseId: this.codebaseId,\n                type: 'IMPLEMENTS',\n                startNodeId: classNode.nodeId,\n                endNodeId: interfaceNodeId,\n                isPartial: false,\n                typeArguments: type.typeArguments ? type.typeArguments.map(t => t.getText()) : undefined\n              }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractInterface",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractInterface",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract interface information from an interface declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterface:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.InterfaceDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterface:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterface:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:interfaceNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "interfaceNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Interface",
    "initializer": "{\n      nodeId: this.generateNodeId('Interface', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Interface'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      description: this.getJsDocComment(node),\n      isGeneric: !!node.typeParameters && node.typeParameters.length > 0,\n      methodCount: node.members.filter(m => ts.isMethodSignature(m)).length,\n      propertyCount: node.members.filter(m => ts.isPropertySignature(m)).length,\n      extendsCount: node.heritageClauses?.filter(h => h.token === ts.SyntaxKind.ExtendsKeyword).length || 0,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:baseInterfaceName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "baseInterfaceName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "type.expression.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:baseInterfaceNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "baseInterfaceNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.resolveTypeNodeId(type.expression, 'Interface', fileNode.path)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:interfaceExtendsRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "interfaceExtendsRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "InterfaceExtends",
    "initializer": "{\n                nodeId: this.generateNodeId('INTERFACE_EXTENDS', `${interfaceNode.nodeId}->${baseInterfaceNodeId}`),\n                codebaseId: this.codebaseId,\n                type: 'INTERFACE_EXTENDS',\n                startNodeId: interfaceNode.nodeId,\n                endNodeId: baseInterfaceNodeId,\n                isDirectExtension: true,\n                inheritanceLevel: 1,\n                typeArguments: type.typeArguments ? type.typeArguments.map(t => t.getText()) : undefined\n              }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractInterfaceProperty",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractInterfaceProperty",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract interface property information from a property signature\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 5,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterfaceProperty:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.PropertySignature",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterfaceProperty:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterfaceProperty:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterfaceProperty:interfaceNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "interfaceNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 3,
    "isOptional": false,
    "isRest": false,
    "typeString": "Interface",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractInterfaceProperty:index",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "index",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 4,
    "isOptional": false,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:typeNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.type"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:typeString",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeString",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "typeNode ? typeNode.getText() : 'any'"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:description",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "description",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getJsDocComment(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:isOptional",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isOptional",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!node.questionToken"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:propertyNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propertyNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Property",
    "initializer": "{\n      nodeId: this.generateNodeId('Property', `${fileNode.path}:${parentName}.${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Property'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isStatic: node.modifiers?.some(m => m.kind === ts.SyntaxKind.StaticKeyword) || false,\n      visibility: this.getVisibility(node),\n      typeString: node.type ? node.type.getText() : undefined,\n      initializer: node.initializer ? node.initializer.getText() : undefined,\n      isReadonly: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ReadonlyKeyword) || false,\n      isOptional: !!node.questionToken,\n      isParameterProperty: false,\n      hasDecorators: false // Simplified implementation\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:relationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationship",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "InterfaceHasProperty",
    "initializer": "{\n      nodeId: this.generateNodeId('HAS_PROPERTY', `${interfaceNode.nodeId}->${propertyNode.nodeId}`),\n      codebaseId: this.codebaseId,\n      type: 'HAS_PROPERTY',\n      startNodeId: interfaceNode.nodeId,\n      endNodeId: propertyNode.nodeId,\n      index,\n      isOptional\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractTypeAlias",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractTypeAlias",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract type alias information from a type alias declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractTypeAlias:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.TypeAliasDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractTypeAlias:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractTypeAlias:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:typeAliasNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeAliasNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "TypeAlias",
    "initializer": "{\n      nodeId: this.generateNodeId('TypeAlias', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['TypeAlias'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      definition: node.type.getText(),\n      isGeneric: !!node.typeParameters && node.typeParameters.length > 0,\n      isUnion: node.type.kind === ts.SyntaxKind.UnionType,\n      isIntersection: node.type.kind === ts.SyntaxKind.IntersectionType,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractFunction",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractFunction",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract function information from a function declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractFunction:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.FunctionDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractFunction:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractFunction:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:functionNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "functionNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Function",
    "initializer": "{\n      nodeId: this.generateNodeId('Function', `${fileNode.path}:${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Function'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isAsync: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AsyncKeyword) || false,\n      description: this.getJsDocComment(node),\n      parameterCount: node.parameters.length,\n      isExported: node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false,\n      isDefaultExport: node.modifiers?.some(m =>\n        m.kind === ts.SyntaxKind.ExportKeyword &&\n        node.modifiers?.some(m2 => m2.kind === ts.SyntaxKind.DefaultKeyword)\n      ) || false,\n      isGenerator: !!node.asteriskToken,\n      isArrowFunction: false,\n      isFunctionExpression: false,\n      hasRestParameter: node.parameters.some(p => !!p.dotDotDotToken),\n      hasOptionalParameters: node.parameters.some(p => !!p.questionToken),\n      hasTypeParameters: !!node.typeParameters && node.typeParameters.length > 0\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractMethod",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractMethod",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract method information from a method declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractMethod:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.MethodDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractMethod:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractMethod:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:parent",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parent",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.parent"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:parentName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parentName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "parent.name.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:methodNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "methodNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Method",
    "initializer": "{\n      nodeId: this.generateNodeId('Method', `${fileNode.path}:${parentName}.${name}`),\n      codebaseId: this.codebaseId,\n      labels: ['Method'],\n      name,\n      file: fileNode.path,\n      startLine: this.getLineNumber(node.getStart()),\n      endLine: this.getLineNumber(node.getEnd()),\n      isAsync: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AsyncKeyword) || false,\n      isStatic: node.modifiers?.some(m => m.kind === ts.SyntaxKind.StaticKeyword) || false,\n      visibility: this.getVisibility(node),\n      description: this.getJsDocComment(node),\n      isAbstract: node.modifiers?.some(m => m.kind === ts.SyntaxKind.AbstractKeyword) || false,\n      isGenerator: !!node.asteriskToken,\n      isGetter: false, // Would need to check if this is a getter method\n      isSetter: false, // Would need to check if this is a setter method\n      parameterCount: node.parameters.length,\n      hasRestParameter: node.parameters.some(p => !!p.dotDotDotToken),\n      hasOptionalParameters: node.parameters.some(p => !!p.questionToken),\n      hasTypeParameters: !!node.typeParameters && node.typeParameters.length > 0\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:parentNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parentNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.generateNodeId('Class', `${fileNode.path}:${parentName}`)"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractProperty",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractProperty",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract property information from a property declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractProperty:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.PropertyDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractProperty:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractProperty:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractVariableStatement",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractVariableStatement",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract variable information from a variable statement\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractVariableStatement:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.VariableStatement",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractVariableStatement:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractVariableStatement:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:variableNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "variableNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Variable",
    "initializer": "{\n        nodeId: this.generateNodeId('Variable', `${fileNode.path}:${name}`),\n        codebaseId: this.codebaseId,\n        labels: ['Variable'],\n        name,\n        file: fileNode.path,\n        startLine: this.getLineNumber(declaration.getStart()),\n        endLine: this.getLineNumber(declaration.getEnd()),\n        isConstant: node.declarationList.flags & ts.NodeFlags.Const ? true : false,\n        scope: this.getVariableScope(node),\n        typeString: declaration.type ? declaration.type.getText() : undefined,\n        initializer: declaration.initializer ? declaration.initializer.getText() : undefined\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractParameters",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractParameters",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract parameters from a function or method declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractParameters:parameters",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parameters",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.NodeArray<ts.ParameterDeclaration>",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractParameters:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractParameters:parent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parent",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "Function | Method",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:paramNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "paramNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Parameter",
    "initializer": "{\n        nodeId: this.generateNodeId('Parameter', `${parent.file}:${parent.name}:${name}`),\n        codebaseId: this.codebaseId,\n        labels: ['Parameter'],\n        name,\n        file: parent.file,\n        startLine: this.getLineNumber(param.getStart()),\n        endLine: this.getLineNumber(param.getEnd()),\n        index,\n        isOptional: !!param.questionToken,\n        isRest: !!param.dotDotDotToken,\n        typeString: param.type ? param.type.getText() : undefined,\n        initializer: param.initializer ? param.initializer.getText() : undefined,\n        isParameterProperty: false, // Default value, should be updated for actual parameter properties\n        hasDecorators: false // Default value, should be updated if decorators are present\n      }"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:hasParamRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasParamRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "HasParameter",
    "initializer": "{\n        nodeId: this.generateNodeId('HAS_PARAMETER', `${parent.nodeId}->${paramNode.nodeId}`),\n        codebaseId: this.codebaseId,\n        type: 'HAS_PARAMETER',\n        startNodeId: parent.nodeId,\n        endNodeId: paramNode.nodeId,\n        index,\n        isOptional: !!param.questionToken,\n        isRest: !!param.dotDotDotToken,\n        hasDefaultValue: !!param.initializer,\n        isDestructured: ts.isObjectBindingPattern(param.name) || ts.isArrayBindingPattern(param.name)\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractImport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract import information from an import declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractImport:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.ImportDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractImport:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractImport:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:moduleSpecifier",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "moduleSpecifier",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.moduleSpecifier.getText().replace(/['\"]/g, '')"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:importClause",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importClause",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.importClause"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:hasDefaultImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasDefaultImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.name"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:hasNamedImports",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasNamedImports",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.namedBindings && ts.isNamedImports(importClause.namedBindings)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:hasNamespaceImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasNamespaceImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.namedBindings && ts.isNamespaceImport(importClause.namedBindings)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:isTypeOnly",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isTypeOnly",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!importClause.isTypeOnly"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:imports",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "imports",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:isPackageImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isPackageImport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!moduleSpecifier.startsWith('.') && !moduleSpecifier.startsWith('/')"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:relationshipType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "isPackageImport ? 'REEXPORTS_FROM_PACKAGE' : 'REEXPORTS'"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:targetNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "targetNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "isPackageImport \n        ? this.generateNodeId('Package', moduleSpecifier)\n        : this.generateNodeId('File', this.resolveImportPath(fileNode.path, moduleSpecifier))"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:importRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Imports",
    "initializer": "{\n        nodeId: this.generateNodeId(relationshipType, `${fileNode.nodeId}->${targetNodeId}`),\n        codebaseId: this.codebaseId,\n        type: 'IMPORTS',\n        startNodeId: fileNode.nodeId,\n        endNodeId: targetNodeId,\n        imports,\n        importCount: imports.length,\n        hasDefaultImport,\n        hasNamedImports,\n        hasNamespaceImport,\n        isTypeOnly,\n        importPath: moduleSpecifier,\n        isRelative: true,\n        isResolved: true,\n        resolvedPath: this.resolveImportPath(fileNode.path, moduleSpecifier)\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractExport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractExport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract export information from an export declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractExport:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.ExportDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractExport:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractExport:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:exportRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "exportRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ExportsLocal",
    "initializer": "{\n        nodeId: this.generateNodeId(relationshipType, `${fileNode.nodeId}->${targetNodeId}`),\n        codebaseId: this.codebaseId,\n        type: 'EXPORTS_LOCAL', // Using ExportsLocal as a simplification\n        startNodeId: fileNode.nodeId,\n        endNodeId: targetNodeId,\n        exportCount: 1,\n        hasNamedExports: true,\n        isTypeOnly: !!node.isTypeOnly,\n        isReExport: true,\n        exportNames: node.exportClause ?\n          ts.isNamedExports(node.exportClause) ?\n            node.exportClause.elements.map(e => e.name.getText()) :\n            ['*'] :\n          ['*'],\n        exportKinds: ['variable'] // Default, should be updated with actual types\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.hasDefaultExport",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "hasDefaultExport",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a source file has a default export\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:hasDefaultExport:sourceFile",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "sourceFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.SourceFile",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:hasDefault",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasDefault",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getDefaultExportExpression",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getDefaultExportExpression",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the default export expression from a source file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getDefaultExportExpression:sourceFile",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "sourceFile",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.SourceFile",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:expression",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "expression",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.expression"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getLineNumber",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getLineNumber",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the line number for a position in the source file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getLineNumber:pos",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "pos",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getJsDocComment",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getJsDocComment",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the JSDoc comment for a node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getJsDocComment:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:jsDocComments",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "jsDocComments",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "ts.getJSDocCommentsAndTags(node)"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getVisibility",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getVisibility",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the visibility of a class member\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getVisibility:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.MethodDeclaration | ts.PropertyDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getVariableScope",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getVariableScope",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the scope of a variable\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getVariableScope:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.VariableStatement",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.resolveImportPath",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "resolveImportPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Resolve an import path relative to a file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:resolveImportPath:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:resolveImportPath:importPath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "importPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:absoluteFilePath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "absoluteFilePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.isAbsolute(filePath)\n      ? filePath\n      : path.resolve(this.rootDir, filePath)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:dir",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dir",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.dirname(absoluteFilePath)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:resolvedPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "resolvedPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "path.resolve(dir, importPath)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:ext",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "ext",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.extname(resolvedPath)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:tsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tsPath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "resolvedPath.replace(/\\.js$/, '.ts')"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.generateNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "generateNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Generate a unique node ID\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:generateNodeId:type",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "type",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:generateNodeId:identifier",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "identifier",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.hasNodeDecorators",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "hasNodeDecorators",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a node has decorators\n   * This is a simplified implementation that would need to be expanded\n   * in a real-world scenario to properly detect decorators\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:hasNodeDecorators:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getFileSize",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getFileSize",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the size of a file in bytes\n   * Returns 0 if the file doesn't exist or can't be accessed\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getFileSize:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:stats",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "stats",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.statSync(filePath)"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getColumnNumber",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getColumnNumber",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the column number for a position in the source file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getColumnNumber:pos",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "pos",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "number",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.resolveTypeNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "resolveTypeNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Resolve a type expression to a node ID\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:resolveTypeNodeId:expression",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "expression",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Expression | ts.EntityName",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:resolveTypeNodeId:expectedType",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "expectedType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:resolveTypeNodeId:currentFilePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "currentFilePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:symbol",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "symbol",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.typeChecker.getSymbolAtLocation(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:declarations",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "declarations",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "symbol.getDeclarations()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:declaration",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "declaration",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "symbol.declarations[0]"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:filePath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "sourceFile.fileName"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:relativePath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relativePath",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.relative(this.rootDir, filePath)"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractFunctionCall",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractFunctionCall",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract function call information from a call expression\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractFunctionCall:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.CallExpression",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractFunctionCall:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractFunctionCall:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:callerNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callerNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.findCallerContext(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:callerNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callerNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getCallerNodeId(callerNode, fileNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:calleeInfo",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "calleeInfo",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getCalleeInfo(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:calleeNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "calleeNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.generateCalleeNodeId(calleeInfo, fileNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:callLocationLine",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callLocationLine",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getLineNumber(node.getStart())"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:callLocationColumn",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callLocationColumn",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getColumnNumber(node.getStart())"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:callsRelationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callsRelationship",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n      nodeId: this.generateNodeId('CALLS', `${callerNodeId}->${calleeNodeId}`),\n      codebaseId: this.codebaseId,\n      type: 'CALLS',\n      startNodeId: callerNodeId,\n      endNodeId: calleeNodeId,\n      callCount: 1,\n      callLocationLines: [callLocationLine],\n      callLocationColumns: [callLocationColumn],\n      arguments: node.arguments.map(arg => arg.getText()),\n      isAsync: false, // Would need to check if the call is awaited\n      isAwait: node.parent && ts.isAwaitExpression(node.parent),\n      isChained: node.parent && ts.isPropertyAccessExpression(node.parent),\n      isConditional: this.isInConditionalContext(node)\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.findCallerContext",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findCallerContext",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Find the function or method that contains this call expression\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:findCallerContext:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:current",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "current",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "typeString": "ts.Node | undefined",
    "initializer": "node"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getCallerNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getCallerNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the node ID of the caller function or method\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getCallerNodeId:callerNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "callerNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.FunctionDeclaration | ts.MethodDeclaration | ts.ArrowFunction | ts.FunctionExpression",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getCallerNodeId:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:methodName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "methodName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "context.name.getText()"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getCalleeInfo",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getCalleeInfo",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get information about the called function\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getCalleeInfo:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.CallExpression",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:object",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "object",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "expression.expression.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:property",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "property",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "expression.name.getText()"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.generateCalleeNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "generateCalleeNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Generate a node ID for the called function\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:generateCalleeNodeId:calleeInfo",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "calleeInfo",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "{ name: string; type: string }",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:generateCalleeNodeId:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.isInConditionalContext",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isInConditionalContext",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a node is in a conditional context (if, ternary, &&, ||, etc.)\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:isInConditionalContext:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractTypeReference",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractTypeReference",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract type reference information from a type reference node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractTypeReference:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.TypeReferenceNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractTypeReference:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractTypeReference:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:context",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "context",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.findReferenceContext(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:contextNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "contextNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getReferenceContextNodeId(context, fileNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:typeName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.typeName.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:typeNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "typeNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.resolveTypeNodeId(node.typeName, 'Interface', fileNode.path) ||\n                      this.resolveTypeNodeId(node.typeName, 'Class', fileNode.path) ||\n                      this.resolveTypeNodeId(node.typeName, 'TypeAlias', fileNode.path)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:referenceType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referenceType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getVariableReferenceType(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:referencesTypeRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referencesTypeRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ReferencesType",
    "initializer": "{\n      nodeId: this.generateNodeId('REFERENCES_TYPE', `${contextNodeId}->${typeNodeId}`),\n      codebaseId: this.codebaseId,\n      type: 'REFERENCES_TYPE',\n      startNodeId: contextNodeId,\n      endNodeId: typeNodeId,\n      referenceType,\n      isArray: this.isArrayType(node),\n      isUnion: this.isUnionType(node.parent),\n      isIntersection: this.isIntersectionType(node.parent),\n      isGeneric: !!(node.typeArguments && node.typeArguments.length > 0),\n      typeArguments: node.typeArguments ? node.typeArguments.map(t => t.getText()) : undefined\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.extractVariableReference",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractVariableReference",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract variable reference information from an identifier node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractVariableReference:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Identifier",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractVariableReference:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "ParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:extractVariableReference:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:variableName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "variableName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:variableNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "variableNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getVariableNodeId(declaration, fileNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:referenceLocationLine",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referenceLocationLine",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getLineNumber(node.getStart())"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:referenceLocationColumn",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referenceLocationColumn",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getColumnNumber(node.getStart())"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:referencesVarRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referencesVarRel",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ReferencesVariable",
    "initializer": "{\n      nodeId: this.generateNodeId('REFERENCES_VARIABLE', `${contextNodeId}->${variableNodeId}`),\n      codebaseId: this.codebaseId,\n      type: 'REFERENCES_VARIABLE',\n      startNodeId: contextNodeId,\n      endNodeId: variableNodeId,\n      referenceType,\n      referenceCount: 1,\n      referenceLocationLines: [referenceLocationLine],\n      referenceLocationColumns: [referenceLocationColumn]\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.findReferenceContext",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "findReferenceContext",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Find the context node for a reference (function, method, class, etc.)\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:findReferenceContext:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getReferenceContextNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getReferenceContextNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the node ID for a reference context\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getReferenceContextNodeId:context",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "context",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getReferenceContextNodeId:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:paramName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "paramName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "declaration.name.getText()"
  },
  {
    "nodeId": "self:Variable:src/parser/ts-parser.ts:propName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propName",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "context.name.getText()"
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getVariableNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getVariableNodeId",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the node ID for a variable declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getVariableNodeId:declaration",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "declaration",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.VariableDeclaration | ts.ParameterDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getVariableNodeId:fileNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "File",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.isDeclarationIdentifier",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isDeclarationIdentifier",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if an identifier is part of a declaration\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:isDeclarationIdentifier:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Identifier",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.getVariableReferenceType",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getVariableReferenceType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Determine if a variable reference is read, write, or readwrite\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:getVariableReferenceType:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Identifier",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.isArrayType",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isArrayType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a type is an array type\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:isArrayType:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.TypeReferenceNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.isUnionType",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isUnionType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a type is part of a union type\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:isUnionType:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node | undefined",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/ts-parser.ts:TSParser.isIntersectionType",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isIntersectionType",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a type is part of an intersection type\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/ts-parser.ts:isIntersectionType:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/ts-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ts.Node | undefined",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/parser/vue-parser.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/parser/vue-parser.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/parser/vue-parser.ts",
    "name": "vue-parser.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 1058,
    "size": 35527,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/parser/vue-parser.ts:VueParserOptions",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "VueParserOptions",
    "file": "src/parser/vue-parser.ts",
    "startLine": 20,
    "endLine": 21,
    "description": "/**\n * Configuration options for the Vue parser\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/vue-parser.ts:VueParserOptions.rootDir",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "rootDir",
    "typeString": "string",
    "description": "/**\n   * Root directory of the codebase\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/vue-parser.ts:VueParserOptions.codebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "codebaseId",
    "typeString": "string",
    "description": "/**\n   * Unique identifier for the codebase\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/vue-parser.ts:VueParserOptions.tsParser",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tsParser",
    "typeString": "TSParser",
    "description": "/**\n   * TypeScript parser instance for parsing script blocks\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/parser/vue-parser.ts:VueParseResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "VueParseResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Result of parsing a Vue file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/vue-parser.ts:VueParseResult.nodes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodes",
    "typeString": "Node[]",
    "description": "/**\n   * Nodes extracted from the file\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/parser/vue-parser.ts:VueParseResult.relationships",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "relationships",
    "typeString": "Relationship[]",
    "description": "/**\n   * Relationships extracted from the file\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Class:src/parser/vue-parser.ts:VueParser",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "VueParser",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Parser for Vue Single File Components\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 28,
    "propertyCount": 3,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/vue-parser.ts:VueParser.rootDir",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "rootDir",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "string",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/vue-parser.ts:VueParser.codebaseId",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "string",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/parser/vue-parser.ts:VueParser.tsParser",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "tsParser",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isStatic": false,
    "visibility": "private",
    "typeString": "TSParser",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.parseFile",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseFile",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Parse a Vue file and extract nodes and relationships\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseFile:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:content",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "content",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "fs.readFileSync(filePath, 'utf-8')"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:{ descriptor }",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "{ descriptor }",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "parseVue(content)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:result",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "VueParseResult",
    "initializer": "{\n      nodes: [],\n      relationships: []\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:fileNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "fileNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.createFileNode(filePath, content)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:componentNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.createComponentNode(filePath, descriptor)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:templateNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "templateNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.parseTemplate(filePath, descriptor.template, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:componentRefs",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "componentRefs",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractComponentReferences(descriptor.template.content, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:scriptResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "scriptResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.parseScript(filePath, descriptor, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:styleNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "styleNodes",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.parseStyles(filePath, descriptor.styles, componentNode)"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.createComponentNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "createComponentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Create a node for the Vue component\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:createComponentNode:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:createComponentNode:descriptor",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "descriptor",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:relativePath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relativePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.relative(this.rootDir, filePath)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:name",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "name",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "emitName.replace(/'/g, '')"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.createFileNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "createFileNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Create a node for the Vue file\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:createFileNode:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:createFileNode:content",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "content",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.parseTemplate",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseTemplate",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Parse the template section of a Vue component\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseTemplate:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseTemplate:template",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "template",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseTemplate:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractComponentReferences",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractComponentReferences",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract component references from template\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractComponentReferences:templateContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "templateContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractComponentReferences:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:ast",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "ast",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "babelParser.parse(script.content, {\n        sourceType: 'module',\n        plugins: [\n          'typescript',\n          'jsx',\n          'decorators-legacy',\n          'classProperties',\n        ],\n      })"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.processTemplateNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "processTemplateNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Process a template AST node to extract component references\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:processTemplateNode:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:processTemplateNode:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:processTemplateNode:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:elementNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "elementNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node as ElementNode"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:tagName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tagName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "elementNode.tag"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:rendersRelationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "rendersRelationship",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Renders",
    "initializer": "{\n            nodeId: this.generateNodeId('RENDERS', `${componentNode.nodeId}->${tagName}`),\n            codebaseId: this.codebaseId,\n            type: 'RENDERS',\n            startNodeId: componentNode.nodeId,\n            endNodeId: tagName, // This is a placeholder, would need to be resolved to actual component ID\n            isConditional: this.hasConditionalDirective(elementNode),\n            renderCount: 1,\n            renderLocationLines: [],\n            renderLocationColumns: []\n          }"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propsResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractDefineProps(script.content, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:eventsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "eventsResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractEventListeners(this.nodeToString(elementNode), componentNode.nodeId, tagName)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:slotsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "slotsResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractSlots(this.nodeToString(elementNode), componentNode.nodeId, tagName)"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.hasConditionalDirective",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "hasConditionalDirective",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if an element has a conditional directive (v-if, v-else-if, v-else)\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:hasConditionalDirective:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ElementNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.hasLoopDirective",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "hasLoopDirective",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if an element has a loop directive (v-for)\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:hasLoopDirective:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ElementNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractKeyFromNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractKeyFromNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract key attribute from an element node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractKeyFromNode:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ElementNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:keyProp",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "keyProp",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.props.find(prop =>\n      (prop.type === NodeTypes.DIRECTIVE && prop.name === 'bind' &&\n       prop.arg && prop.arg.type === NodeTypes.SIMPLE_EXPRESSION && prop.arg.content === 'key') ||\n      (prop.type === NodeTypes.ATTRIBUTE && prop.name === 'key')\n    )"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.processSlotElement",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "processSlotElement",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Process a slot element\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:processSlotElement:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ElementNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:processSlotElement:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:processSlotElement:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueParseResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:nameProp",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nameProp",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.props.find(prop =>\n      (prop.type === NodeTypes.DIRECTIVE && prop.name === 'bind' &&\n       prop.arg && prop.arg.type === NodeTypes.SIMPLE_EXPRESSION && prop.arg.content === 'name') ||\n      (prop.type === NodeTypes.ATTRIBUTE && prop.name === 'name')\n    )"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:slotName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "slotName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "'default'"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.nodeToString",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "nodeToString",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Convert a node to its string representation for legacy parsing methods\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:nodeToString:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "ElementNode",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:dirName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dirName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "prop.name === 'bind' ? ':' :\n                       prop.name === 'on' ? '@' :\n                       `v-${prop.name}`"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:argStr",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "argStr",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "prop.arg && prop.arg.type === NodeTypes.SIMPLE_EXPRESSION ?\n                      prop.arg.content : ''"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:valueStr",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "valueStr",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "prop.exp && prop.exp.type === NodeTypes.SIMPLE_EXPRESSION ?\n                        prop.exp.content : ''"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractKeyAttribute",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractKeyAttribute",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract key attribute from component tag\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractKeyAttribute:tagContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "tagContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:keyMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "keyMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "tagContent.match(/:key=\"([^\"]+)\"/)"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractProps",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractProps",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract props from component tag\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractProps:tagContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "tagContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractProps:fromNodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fromNodeId",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractProps:toComponentName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "toComponentName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propRegex",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propRegex",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "/(\\w+)(?::\\s*([^,]+))?(?:,|\\s*})/g"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:props",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "props",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:bindings",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "bindings",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, string>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "element.value"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propValue",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propValue",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "staticPropMatch[2]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:staticPropRegex",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "staticPropRegex",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "/\\s([a-zA-Z0-9-]+)=\"([^\"]+)\"/g"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:staticPropMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "staticPropMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:providesPropsRelationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "providesPropsRelationship",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ProvidesProps",
    "initializer": "{\n        nodeId: this.generateNodeId('PROVIDES_PROPS', `${fromNodeId}->${toComponentName}`),\n        codebaseId: this.codebaseId,\n        type: 'PROVIDES_PROPS',\n        startNodeId: fromNodeId,\n        endNodeId: toComponentName, // This is a placeholder, would need to be resolved to actual component ID\n        props,\n        bindings\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractEventListeners",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractEventListeners",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract event listeners from component tag\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractEventListeners:tagContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "tagContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractEventListeners:fromNodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fromNodeId",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractEventListeners:toComponentName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "toComponentName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:eventRegex",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "eventRegex",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "/(?:v-on:|@)([a-zA-Z0-9-]+)=\"([^\"]+)\"/g"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:eventMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "eventMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:events",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "events",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:handlers",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "handlers",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Record<string, string>",
    "initializer": "{}"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:eventName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "eventName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "eventMatch[1]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:handlerValue",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "handlerValue",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "eventMatch[2]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:listensToRelationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "listensToRelationship",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ListensTo",
    "initializer": "{\n        nodeId: this.generateNodeId('LISTENS_TO', `${fromNodeId}->${toComponentName}`),\n        codebaseId: this.codebaseId,\n        type: 'LISTENS_TO',\n        startNodeId: fromNodeId,\n        endNodeId: toComponentName, // This is a placeholder, would need to be resolved to actual component ID\n        events,\n        handlers\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractSlots",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractSlots",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract slots from component tag\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractSlots:tagContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "tagContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractSlots:fromNodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "fromNodeId",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractSlots:toComponentName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "toComponentName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.parseScript",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseScript",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Parse the script section of a Vue component\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseScript:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseScript:descriptor",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "descriptor",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "SFCDescriptor",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseScript:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:script",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "script",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "descriptor.script || descriptor.scriptSetup"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:isSetup",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isSetup",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "!!descriptor.scriptSetup"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:scriptNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "scriptNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "ComponentScript",
    "initializer": "{\n      nodeId: this.generateNodeId('ComponentScript', `${relativePath}:script`),\n      codebaseId: this.codebaseId,\n      labels: ['ComponentScript'],\n      lang: script.lang || 'js',\n      componentId: componentNode.nodeId,\n      isSetup,\n      hasDefineProps: script.content.includes('defineProps'),\n      hasDefineEmits: script.content.includes('defineEmits'),\n      hasDefineExpose: script.content.includes('defineExpose'),\n      hasDefineOptions: script.content.includes('defineOptions')\n    }"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:callee",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callee",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "init.callee"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitsResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitsResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractDefineEmits(script.content, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:composableResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "composableResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractComposableUsage(callee.name, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:importResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractImportFromAST(path.node, componentNode)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:init",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "init",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.node.init"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:reactiveStateResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "reactiveStateResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractReactiveStateFromAST(path.node, callee.name, componentNode)"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractDefineProps",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractDefineProps",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract props defined with defineProps\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefineProps:scriptContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "scriptContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefineProps:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propsMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propsMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "scriptContent.match(/defineProps[<\\(]([^>)]+)[>\\)]/)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propsContent",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propsContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "propsMatch[1]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propType",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "'any'"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:propNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "propNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Prop",
    "initializer": "{\n            nodeId: this.generateNodeId('Prop', `${componentNode.path}:${propName}`),\n            codebaseId: this.codebaseId,\n            labels: ['Prop'],\n            name: propName,\n            componentId: componentNode.nodeId,\n            type: 'any',\n            isRequired: false,\n            hasDefault: false\n          }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractDefaultValue",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractDefaultValue",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract default value for a prop\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefaultValue:propsContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "propsContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefaultValue:propName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "propName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:defaultMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "defaultMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "propsContent.match(new RegExp(`${propName}[^{]*default:\\\\s*([^,}]+)`))"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractDefinePropsFromAST",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractDefinePropsFromAST",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract defineProps from AST\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefinePropsFromAST:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "t.CallExpression",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefinePropsFromAST:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:args",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "args",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.arguments"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:arg",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "arg",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "init.arguments[0]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:isRequired",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "isRequired",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:hasDefault",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasDefault",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:defaultValue",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "defaultValue",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "typeString": "string | undefined"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:scriptContent",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "scriptContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.getNodeSource(node)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:simpleResult",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "simpleResult",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.extractDefineEmits(scriptContent, componentNode)"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractDefineEmitsFromAST",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractDefineEmitsFromAST",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract defineEmits from AST\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefineEmitsFromAST:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "t.CallExpression",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefineEmitsFromAST:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "emitMatch[1]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Emit",
    "initializer": "{\n            nodeId: this.generateNodeId('Emit', `${componentNode.path}:${emitName}`),\n            codebaseId: this.codebaseId,\n            labels: ['Emit'],\n            name: emitName,\n            componentId: componentNode.nodeId,\n            payloadType: payloadType.trim()\n          }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractComposableUsage",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractComposableUsage",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract composable usage from AST\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractComposableUsage:composableName",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "composableName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractComposableUsage:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:usesComposableRelationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "usesComposableRelationship",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Relationship",
    "initializer": "{\n      nodeId: this.generateNodeId('USES_COMPOSABLE', `${componentNode.nodeId}->${composableName}`),\n      codebaseId: this.codebaseId,\n      type: 'USES_COMPOSABLE',\n      startNodeId: componentNode.nodeId,\n      endNodeId: composableName, // This is a placeholder\n      isCrossCodebase: false\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractImportFromAST",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractImportFromAST",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract import from AST\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractImportFromAST:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "t.ImportDeclaration",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractImportFromAST:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:source",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "source",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.source.value"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:importedSpecifiers",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importedSpecifiers",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "string[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:hasDefaultImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasDefaultImport",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:hasNamespaceImport",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "hasNamespaceImport",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "false"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:importsRelationship",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importsRelationship",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Relationship",
    "initializer": "{\n      nodeId: this.generateNodeId('IMPORTS', `${componentNode.nodeId}->${source}`),\n      codebaseId: this.codebaseId,\n      type: 'IMPORTS',\n      startNodeId: componentNode.nodeId,\n      endNodeId: source, // This is a placeholder\n      isCrossCodebase: false\n    }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractReactiveStateFromAST",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractReactiveStateFromAST",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract reactive state from AST\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractReactiveStateFromAST:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "t.VariableDeclarator",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractReactiveStateFromAST:reactivityType",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "reactivityType",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractReactiveStateFromAST:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:stateName",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "stateName",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "node.id.name"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:reactiveStateNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "reactiveStateNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{\n        nodeId: this.generateNodeId('ReactiveState', `${componentNode.path}:${stateName}`),\n        codebaseId: this.codebaseId,\n        labels: ['ReactiveState'],\n        name: stateName,\n        componentId: componentNode.nodeId,\n        type: 'unknown', // Would need type inference\n        reactivityType: reactivityType,\n        initialValue: this.getInitialValue(node.init)\n      }"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.getInitialValue",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getInitialValue",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the initial value of a reactive state\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:getInitialValue:init",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "init",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "t.Expression | null | undefined",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.getNodeSource",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "getNodeSource",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Get the source code of a node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:getNodeSource:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "t.Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.extractDefineEmits",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "extractDefineEmits",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Extract emits defined with defineEmits\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefineEmits:scriptContent",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "scriptContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:extractDefineEmits:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitsMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitsMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "scriptContent.match(/defineEmits[<\\(]([^>)]+)[>\\)]/)"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitsContent",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitsContent",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "emitsMatch[1]"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitNames",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitNames",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "emitsContent.match(/'([^']+)'/g) || []"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitRegex",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitRegex",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "/(\\w+)(?::\\s*\\[([^\\]]*)\\])?/g"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:emitMatch",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "emitMatch",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block"
  },
  {
    "nodeId": "self:Variable:src/parser/vue-parser.ts:payloadType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "payloadType",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "emitMatch[2] || ''"
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.parseStyles",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "parseStyles",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Parse the style sections of a Vue component\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 3,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseStyles:filePath",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseStyles:styles",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "styles",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:parseStyles:componentNode",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "componentNode",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "VueComponent",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/parser/vue-parser.ts:VueParser.generateNodeId",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "generateNodeId",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Generate a unique ID for a node\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:generateNodeId:type",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "type",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/parser/vue-parser.ts:generateNodeId:identifier",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "identifier",
    "file": "src/parser/vue-parser.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/schema/index.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/index.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/index.ts",
    "name": "index.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 139,
    "size": 3818,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Variable:src/schema/index.ts:SCHEMA_VERSION",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "SCHEMA_VERSION",
    "file": "src/schema/index.ts",
    "startLine": 17,
    "endLine": 17,
    "isConstant": true,
    "scope": "module",
    "initializer": "\"2.0.0\""
  },
  {
    "nodeId": "self:Variable:src/schema/index.ts:SCHEMA_METADATA",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "SCHEMA_METADATA",
    "file": "src/schema/index.ts",
    "startLine": 17,
    "endLine": 21,
    "isConstant": true,
    "scope": "module",
    "initializer": "{\n  name: \"TypeScript Code Graph Schema\",\n  version: SCHEMA_VERSION,\n  description:\n    \"A comprehensive schema for representing TypeScript codebases as a graph\",\n  author: \"TypeScript Code Graph Team\",\n  license: \"MIT\",\n  repository: \"https://github.com/typescript-code-graph/schema\",\n  nodeTypes: [\n    \"Codebase\",\n    \"Package\",\n    \"Directory\",\n    \"File\",\n    \"Module\",\n    \"Namespace\",\n    \"Class\",\n    \"Interface\",\n    \"Enum\",\n    \"TypeAlias\",\n    \"Function\",\n    \"Method\",\n    \"Constructor\",\n    \"Property\",\n    \"Variable\",\n    \"Parameter\",\n    \"JsxElement\",\n    \"JsxAttribute\",\n    \"Test\",\n    \"Component\",\n    \"Dependency\",\n    \"TypeDefinition\",\n    \"ASTNodeInfo\",\n    \"Task\",\n    \"Subtask\",\n    \"Agent\",\n    \"Verification\",\n    \"Result\",\n    \"Orientation\",\n    \"InterfaceProperty\",\n    \"VueComponent\",\n    \"ComponentTemplate\",\n    \"ComponentScript\",\n    \"ComponentStyle\",\n    \"Prop\",\n    \"Emit\",\n    \"ReactiveState\",\n    \"Composable\",\n  ],\n  relationshipTypes: [\n    \"IMPORTS\",\n    \"IMPORTS_FROM_PACKAGE\",\n    \"IMPORTS_TYPES\",\n    \"IMPORTS_TYPES_FROM_PACKAGE\",\n    \"EXPORTS_LOCAL\",\n    \"EXPORTS_DEFAULT\",\n    \"REEXPORTS\",\n    \"REEXPORTS_FROM_PACKAGE\",\n    \"REEXPORTS_ALL\",\n    \"EXTENDS\",\n    \"INTERFACE_EXTENDS\",\n    \"IMPLEMENTS\",\n    \"CALLS\",\n    \"CONTAINS\",\n    \"HAS_METHOD\",\n    \"HAS_PARAMETER\",\n    \"HAS_PROPERTY\",\n    \"REFERENCES_TYPE\",\n    \"REFERENCES_VARIABLE\",\n    \"DEPENDS_ON\",\n    \"IS_DECORATED_BY\",\n    \"TESTS\",\n    \"RENDERS\",\n    \"USES_HOOK\",\n    \"AST_PARENT_CHILD\",\n    \"DEFINES_VARIABLE\",\n    \"DEFINES_FUNCTION\",\n    \"DEFINES_INTERFACE\",\n    \"DEFINES_CLASS\",\n    \"DEFINES_TYPE_ALIAS\",\n    \"DEFINES_ENUM\",\n    \"DEFINES_NAMESPACE\",\n    \"DEFINES_MODULE\",\n    \"DEFINES_COMPONENT\",\n    'DECOMPOSES_TO', 'EXECUTED_BY', 'VERIFIED_BY',\n    'DEFINES_VUE_COMPONENT', 'PROVIDES_PROPS', 'LISTENS_TO', 'USES_SLOT', 'USES_COMPOSABLE'\n  ],\n  neo4jIndexes: [\n    { label: \"File\", property: \"path\", type: \"BTREE\" },\n    { label: \"CodeElement\", property: \"name\", type: \"BTREE\" },\n    { label: \"Node\", property: \"codebaseId\", type: \"BTREE\" },\n    { label: \"Class\", property: \"name\", type: \"BTREE\" },\n    { label: \"Function\", property: \"name\", type: \"BTREE\" },\n    { label: \"Variable\", property: \"name\", type: \"BTREE\" },\n    { label: \"Component\", property: \"name\", type: \"BTREE\" },\n    { label: 'Task', property: 'title', type: 'BTREE' },\n    { label: 'Subtask', property: 'title', type: 'BTREE' },\n    { label: 'Agent', property: 'name', type: 'BTREE' },\n    { label: 'InterfaceProperty', property: 'name', type: 'BTREE' },\n    { label: 'VueComponent', property: 'name', type: 'BTREE' },\n    { label: 'Prop', property: 'name', type: 'BTREE' },\n    { label: 'Emit', property: 'name', type: 'BTREE' },\n    { label: 'ReactiveState', property: 'name', type: 'BTREE' },\n    { label: 'Composable', property: 'name', type: 'BTREE' }\n  ],\n  neo4jConstraints: [{ label: \"Node\", property: \"nodeId\", type: \"UNIQUENESS\" }],\n  neo4jFullTextIndexes: [\n    {\n      name: \"codeSearch\",\n      labels: [\"CodeElement\"],\n      properties: [\"name\", \"documentation\", \"sourceCode\"],\n    },\n    {\n      name: \"vueComponentSearch\",\n      labels: [\"VueComponent\", \"ComponentTemplate\", \"ComponentScript\", \"Composable\"],\n      properties: [\"name\", \"path\"],\n    },\n  ],\n}"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/schema/nodes.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/nodes.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/nodes.ts",
    "name": "nodes.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 649,
    "size": 14303,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Codebase",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Codebase",
    "file": "src/schema/nodes.ts",
    "startLine": 4,
    "endLine": 12,
    "description": "/**\n * Represents an entire codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.version",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "version",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.rootPath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "rootPath",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.repositoryUrl",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "repositoryUrl",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Codebase.language",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "language",
    "typeString": "\"typescript\" | \"javascript\" | \"mixed\"",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Package",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Package",
    "file": "src/schema/nodes.ts",
    "startLine": 12,
    "endLine": 20,
    "description": "/**\n * Represents a package (npm package, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 11,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.absolutePath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "absolutePath",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.version",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "version",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.author",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "author",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.license",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "license",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.dependencies",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "dependencies",
    "typeString": "Record<string, string>",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.devDependencies",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "devDependencies",
    "typeString": "Record<string, string>",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.peerDependencies",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "peerDependencies",
    "typeString": "Record<string, string>",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Package.isLocal",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isLocal",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Directory",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Directory",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a directory in the codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Directory.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Directory.absolutePath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "absolutePath",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Directory.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Directory.parentPath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parentPath",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Directory.isRoot",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isRoot",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:File",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "File",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a file in the codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 21,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.absolutePath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "absolutePath",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.extension",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "extension",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.language",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "language",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.lineCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "lineCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.size",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "size",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.hash",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hash",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.hasDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.defaultExportExpression",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "defaultExportExpression",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.hasNamedExports",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasNamedExports",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.namedExports",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "namedExports",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.hasCommonJSExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasCommonJSExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.commonJSExportExpression",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "commonJSExportExpression",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.importCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "importCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.exportCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.isTest",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTest",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.isTypeDefinition",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTypeDefinition",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.isModule",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isModule",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.isEntry",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isEntry",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:File.parentDirectory",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parentDirectory",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Module",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Module",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a module in the codebase\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Module.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Module.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Module.isInternal",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isInternal",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Module.isThirdParty",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isThirdParty",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Module.sourceFile",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceFile",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Namespace",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Namespace",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a namespace declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Namespace.isGlobal",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGlobal",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Namespace.isAmbient",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAmbient",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Class",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Class",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a class declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 20,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.isAbstract",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAbstract",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.isGeneric",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGeneric",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.hasConstructor",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasConstructor",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.constructorParams",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "constructorParams",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.methodCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "methodCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.propertyCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "propertyCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.staticMethodCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "staticMethodCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.staticPropertyCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "staticPropertyCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.privateMethodCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "privateMethodCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.privatePropertyCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "privatePropertyCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.protectedMethodCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "protectedMethodCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.protectedPropertyCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "protectedPropertyCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.publicMethodCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "publicMethodCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.publicPropertyCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "publicPropertyCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.implementsCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "implementsCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.extendsClass",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "extendsClass",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.implementsInterfaces",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "implementsInterfaces",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Class.hasDecorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDecorators",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Interface",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Interface",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an interface declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.isGeneric",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGeneric",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.methodCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "methodCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.propertyCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "propertyCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.extendsCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "extendsCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.extendsInterfaces",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "extendsInterfaces",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Interface.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Enum",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Enum",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an enum declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Enum.isConst",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isConst",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Enum.members",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "members",
    "typeString": "EnumMember[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Enum.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Enum.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:EnumMember",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "EnumMember",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an enum member\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:EnumMember.value",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "value",
    "typeString": "string | number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:EnumMember.isComputed",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isComputed",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:TypeAlias",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeAlias",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type alias declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.definition",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "definition",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.isGeneric",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGeneric",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.isUnion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isUnion",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.isIntersection",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isIntersection",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeAlias.referencedTypes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedTypes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Function",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Function",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a function declaration or expression\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 13,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.parameterCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parameterCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.isGenerator",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGenerator",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.isArrowFunction",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isArrowFunction",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.isFunctionExpression",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isFunctionExpression",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.hasRestParameter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasRestParameter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.hasOptionalParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasOptionalParameters",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.hasTypeParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasTypeParameters",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.callExpressions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "callExpressions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.referencedVariables",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedVariables",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.referencedFunctions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedFunctions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Function.referencedTypes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedTypes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Method",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Method",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a method in a class or interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 16,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.isStatic",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isStatic",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.visibility",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "visibility",
    "typeString": "\"public\" | \"protected\" | \"private\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.isAbstract",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAbstract",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.isGenerator",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGenerator",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.isGetter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGetter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.isSetter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isSetter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.parameterCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parameterCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.hasRestParameter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasRestParameter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.hasOptionalParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasOptionalParameters",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.hasTypeParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasTypeParameters",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.callExpressions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "callExpressions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.referencedVariables",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedVariables",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.referencedFunctions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedFunctions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.referencedTypes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedTypes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.overrides",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "overrides",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Method.overridesMethod",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "overridesMethod",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Constructor",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Constructor",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a constructor in a class\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 9,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.visibility",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "visibility",
    "typeString": "\"public\" | \"protected\" | \"private\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.parameterCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parameterCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.hasRestParameter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasRestParameter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.hasOptionalParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasOptionalParameters",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.hasParameterProperties",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasParameterProperties",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.callExpressions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "callExpressions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.referencedVariables",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedVariables",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.referencedFunctions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedFunctions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Constructor.referencedTypes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedTypes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Property",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Property",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a property in a class or interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 9,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.isStatic",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isStatic",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.visibility",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "visibility",
    "typeString": "\"public\" | \"protected\" | \"private\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.isReadonly",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isReadonly",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.isOptional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOptional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.typeString",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeString",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.initializer",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "initializer",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.isParameterProperty",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isParameterProperty",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.hasDecorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDecorators",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Property.decorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "decorators",
    "typeString": "Decorator[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Variable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Variable",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a variable declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 12,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.isConstant",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isConstant",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.scope",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "scope",
    "typeString": "\"global\" | \"module\" | \"function\" | \"block\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.typeString",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeString",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.initializer",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "initializer",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.isDestructured",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDestructured",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.isArray",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isArray",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.isObject",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isObject",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.referencedVariables",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedVariables",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.referencedFunctions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedFunctions",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Variable.referencedTypes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referencedTypes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Parameter",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Parameter",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a function or method parameter\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.index",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "index",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.isOptional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOptional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.isRest",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isRest",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.typeString",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeString",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.initializer",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "initializer",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.isParameterProperty",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isParameterProperty",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.hasDecorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDecorators",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Parameter.decorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "decorators",
    "typeString": "Decorator[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:JsxElement",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "JsxElement",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a JSX/TSX element (React component)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.tagName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tagName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.isComponent",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isComponent",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.isSelfClosing",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isSelfClosing",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.hasChildren",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasChildren",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.attributes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "attributes",
    "typeString": "JsxAttribute[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.parentElement",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parentElement",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxElement.childElements",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "childElements",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:JsxAttribute",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "JsxAttribute",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a JSX/TSX attribute\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxAttribute.value",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "value",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxAttribute.isSpread",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isSpread",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:JsxAttribute.isExpression",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExpression",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Test",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Test",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a test (unit test, integration test, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Test.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "\"unit\" | \"integration\" | \"e2e\" | \"other\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Test.framework",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "framework",
    "typeString": "\"jest\" | \"mocha\" | \"jasmine\" | \"other\"",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Test.testTarget",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "testTarget",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Test.assertions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "assertions",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Test.isAsync",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAsync",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Component",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Component",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a component (React, Vue, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 12,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.framework",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "framework",
    "typeString": "\"react\" | \"vue\" | \"angular\" | \"svelte\" | \"other\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.isFunction",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isFunction",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.isClass",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isClass",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.hasProps",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasProps",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.hasState",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasState",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.propsInterface",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "propsInterface",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.stateInterface",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "stateInterface",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.hasJsx",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasJsx",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.hasHooks",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasHooks",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Component.hooks",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hooks",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Dependency",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Dependency",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a dependency (npm package, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.version",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "version",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.isDevDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDevDependency",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.isPeerDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPeerDependency",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.isOptionalDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOptionalDependency",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.isDirectDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDirectDependency",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.isTransitiveDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTransitiveDependency",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Dependency.importCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "importCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:TypeDefinition",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeDefinition",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type definition\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeDefinition.source",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "source",
    "typeString": "\"local\" | \"dependency\" | \"standard\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeDefinition.packageName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageName",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeDefinition.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:TypeDefinition.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:ASTNodeInfo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ASTNodeInfo",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents direct AST node information\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.nodeType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeType",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.nodeKind",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeKind",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.startPos",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "startPos",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.endPos",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "endPos",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.parentNode",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parentNode",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.childNodes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "childNodes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ASTNodeInfo.flags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "flags",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Hypothesis",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Hypothesis",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a hypothesis about code\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.confidence",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "confidence",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.status",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "status",
    "typeString": "\"unverified\" | \"confirmed\" | \"refuted\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.evidence",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "evidence",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Hypothesis.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Reflection",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Reflection",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a reflection on code\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Reflection.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Reflection.content",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "content",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Reflection.depth",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "depth",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Reflection.perspective",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "perspective",
    "typeString": "| \"performance\"\n    | \"security\"\n    | \"maintainability\"\n    | \"architecture\"\n    | \"other\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Reflection.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Reflection.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Insight",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Insight",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an insight derived from code analysis\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.content",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "content",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.novelty",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "novelty",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.actionability",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "actionability",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.impact",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "impact",
    "typeString": "\"low\" | \"medium\" | \"high\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Insight.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Question",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Question",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a question about code\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Question.text",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "text",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Question.status",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "status",
    "typeString": "\"open\" | \"answered\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Question.complexity",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "complexity",
    "typeString": "\"simple\" | \"complex\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Question.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Question.answer",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "answer",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Question.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Decision",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Decision",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a decision about code\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.status",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "status",
    "typeString": "\"proposed\" | \"implemented\" | \"reverted\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.rationale",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "rationale",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.alternatives",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "alternatives",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Decision.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Pattern",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Pattern",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a pattern identified in code\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.frequency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "frequency",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.intentionality",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "intentionality",
    "typeString": "\"deliberate\" | \"accidental\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.quality",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "quality",
    "typeString": "\"anti-pattern\" | \"best-practice\" | \"neutral\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.examples",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "examples",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Pattern.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Task",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Task",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a task to be completed\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 10,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.status",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "status",
    "typeString": "\"pending\" | \"in_progress\" | \"completed\" | \"deferred\" | \"cancelled\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.priority",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "priority",
    "typeString": "\"low\" | \"medium\" | \"high\" | \"critical\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.effort",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "effort",
    "typeString": "\"trivial\" | \"minor\" | \"major\" | \"significant\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.assignedTo",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "assignedTo",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.dueDate",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "dueDate",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "\"human\" | \"ai\" | \"system\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.completedAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "completedAt",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Task.tags",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "tags",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Subtask",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Subtask",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a component piece of work derived from a Task\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Subtask.nodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Subtask.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Subtask.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Subtask.status",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "status",
    "typeString": "\"Not Started\" | \"In Progress\" | \"Completed\" | \"Blocked\"",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Subtask.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Subtask.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Agent",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Agent",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an entity responsible for performing work\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Agent.nodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Agent.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Agent.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Agent.capabilities",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "capabilities",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Agent.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Verification",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Verification",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a validation checkpoint ensuring quality\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Verification.nodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Verification.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Verification.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Verification.method",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "method",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Verification.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Result",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Result",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents concrete outcomes and artifacts produced\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Result.nodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Result.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Result.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Result.content",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "content",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Result.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Orientation",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Orientation",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a high-level orientation or framing of the project\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Orientation.nodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Orientation.title",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "title",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Orientation.content",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "content",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Orientation.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Orientation.createdBy",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdBy",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:InterfaceProperty",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "InterfaceProperty",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Property of an Interface or Type\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:InterfaceProperty.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "\"InterfaceProperty\"",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:InterfaceProperty.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:InterfaceProperty.typeString",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeString",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:InterfaceProperty.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:InterfaceProperty.isOptional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOptional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:InterfaceProperty.defaultValue",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "defaultValue",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:VueComponent",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "VueComponent",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a Vue Single File Component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 11,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.absolutePath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "absolutePath",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.hasTemplate",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasTemplate",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.hasScript",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasScript",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.hasScriptSetup",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasScriptSetup",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.hasStyle",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasStyle",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.styleCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "styleCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.isAsync",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAsync",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:VueComponent.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:ComponentTemplate",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ComponentTemplate",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents the template section of a Vue component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentTemplate.content",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "content",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentTemplate.lang",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "lang",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentTemplate.componentId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentTemplate.hasSlots",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasSlots",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentTemplate.slotCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "slotCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:ComponentScript",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ComponentScript",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents the script section of a Vue component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.lang",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "lang",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.componentId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.isSetup",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isSetup",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.hasDefineProps",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefineProps",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.hasDefineEmits",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefineEmits",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.hasDefineExpose",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefineExpose",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentScript.hasDefineOptions",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefineOptions",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:ComponentStyle",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ComponentStyle",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents the style section of a Vue component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentStyle.lang",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "lang",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentStyle.componentId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentStyle.isScoped",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isScoped",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ComponentStyle.isModule",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isModule",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Prop",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Prop",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a prop definition in a Vue component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Prop.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Prop.componentId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Prop.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Prop.isRequired",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isRequired",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Prop.hasDefault",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefault",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Prop.defaultValue",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "defaultValue",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Emit",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Emit",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents an emit definition in a Vue component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Emit.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Emit.componentId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Emit.payloadType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "payloadType",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:Composable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Composable",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a Vue composable function\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 8,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.file",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "file",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.startLine",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "startLine",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.endLine",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "endLine",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.isAsync",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAsync",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.returnTypes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "returnTypes",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:Composable.dependencies",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "dependencies",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:ReactiveState",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReactiveState",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents reactive state in a composable or component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ReactiveState.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ReactiveState.composableId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "composableId",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ReactiveState.componentId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentId",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ReactiveState.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ReactiveState.reactivityType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "reactivityType",
    "typeString": "'ref' | 'reactive' | 'computed' | 'readonly' | 'shallowRef' | 'shallowReactive'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:ReactiveState.initialValue",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "initialValue",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:SassVariable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "SassVariable",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a SASS variable\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassVariable.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassVariable.value",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "value",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassVariable.file",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "file",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassVariable.isPrivate",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPrivate",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassVariable.usageCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "usageCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:SassMixin",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "SassMixin",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a SASS mixin\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassMixin.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassMixin.parameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parameters",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassMixin.content",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "content",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassMixin.file",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "file",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassMixin.usageCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "usageCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/nodes.ts:SassModule",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "SassModule",
    "file": "src/schema/nodes.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a SASS module/partial\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.absolutePath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "absolutePath",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.isPartial",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPartial",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.variableCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "variableCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.mixinCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "mixinCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/nodes.ts:SassModule.functionCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "functionCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/schema/relationships.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/relationships.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/relationships.ts",
    "name": "relationships.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 558,
    "size": 11808,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ImportRelationship",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportRelationship",
    "file": "src/schema/relationships.ts",
    "startLine": 4,
    "endLine": 12,
    "description": "/**\n * Base import relationship with common properties\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 10,
    "extendsCount": 1,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.imports",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "imports",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.importCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "importCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.hasDefaultImport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefaultImport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.hasNamedImports",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasNamedImports",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.hasNamespaceImport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasNamespaceImport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.isTypeOnly",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTypeOnly",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.importPath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "importPath",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.isRelative",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isRelative",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.isResolved",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isResolved",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportRelationship.resolvedPath",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "resolvedPath",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ExportRelationship",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExportRelationship",
    "file": "src/schema/relationships.ts",
    "startLine": 15,
    "endLine": 19,
    "description": "/**\n * Base export relationship with common properties\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": false,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportRelationship.exports",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exports",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportRelationship.exportCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportRelationship.hasNamedExports",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasNamedExports",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportRelationship.hasNamespaceExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasNamespaceExport",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportRelationship.isTypeOnly",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTypeOnly",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportRelationship.isReExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isReExport",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Imports",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Imports",
    "file": "src/schema/relationships.ts",
    "startLine": 20,
    "endLine": 21,
    "description": "/**\n * File imports from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Imports.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPORTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ImportsFromPackage",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsFromPackage",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File imports from a package\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsFromPackage.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPORTS_FROM_PACKAGE'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsFromPackage.packageName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsFromPackage.packageVersion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageVersion",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsFromPackage.isDevDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDevDependency",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsFromPackage.isPeerDependency",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPeerDependency",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ImportsTypes",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsTypes",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File imports types from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsTypes.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPORTS_TYPES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsTypes.typeNames",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeNames",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ImportsTypesFromPackage",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsTypesFromPackage",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File imports types from a package\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsTypesFromPackage.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPORTS_TYPES_FROM_PACKAGE'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsTypesFromPackage.packageName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsTypesFromPackage.packageVersion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageVersion",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsTypesFromPackage.typeNames",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeNames",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ExportsLocal",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExportsLocal",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File exports a local declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsLocal.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'EXPORTS_LOCAL'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsLocal.exportNames",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportNames",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsLocal.exportKinds",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportKinds",
    "typeString": "('class' | 'interface' | 'function' | 'variable' | 'type' | 'enum')[]",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ExportsDefault",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExportsDefault",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File exports a default declaration\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsDefault.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'EXPORTS_DEFAULT'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsDefault.export",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "export",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsDefault.expression",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "expression",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExportsDefault.exportKind",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportKind",
    "typeString": "'class' | 'interface' | 'function' | 'variable' | 'type' | 'enum' | 'expression'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Reexports",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Reexports",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File re-exports from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Reexports.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REEXPORTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Reexports.sourceFile",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceFile",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Reexports.exportNames",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportNames",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ReexportsFromPackage",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReexportsFromPackage",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File re-exports from a package\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReexportsFromPackage.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REEXPORTS_FROM_PACKAGE'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReexportsFromPackage.packageName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReexportsFromPackage.packageVersion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "packageVersion",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReexportsFromPackage.exportNames",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "exportNames",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ReexportsAll",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReexportsAll",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File re-exports all from another file\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReexportsAll.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REEXPORTS_ALL'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReexportsAll.sourceFile",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceFile",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Extends",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Extends",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class extends another class\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Extends.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'EXTENDS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Extends.isDirectExtension",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDirectExtension",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Extends.inheritanceLevel",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "inheritanceLevel",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Extends.typeArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:InterfaceExtends",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "InterfaceExtends",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Interface extends another interface\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceExtends.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'INTERFACE_EXTENDS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceExtends.isDirectExtension",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDirectExtension",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceExtends.inheritanceLevel",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "inheritanceLevel",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceExtends.typeArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Implements",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Implements",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task implements a decision\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Implements.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPLEMENTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Implements.isPartial",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPartial",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Implements.typeArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Calls",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Calls",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Function or method calls another function or method\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 9,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'CALLS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.callCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "callCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.callLocationLines",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "callLocationLines",
    "typeString": "number[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.callLocationColumns",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "callLocationColumns",
    "typeString": "number[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.arguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "arguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.isAsync",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAsync",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.isAwait",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAwait",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.isChained",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isChained",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Calls.isConditional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isConditional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Contains",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Contains",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity contains another entity (e.g., file contains class)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contains.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'CONTAINS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contains.containerType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "containerType",
    "typeString": "'file' | 'class' | 'interface' | 'namespace' | 'function' | 'method' | 'block'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contains.containmentType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "containmentType",
    "typeString": "'declaration' | 'expression' | 'statement'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contains.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:HasMethod",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "HasMethod",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class or interface has a method\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasMethod.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'HAS_METHOD'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasMethod.methodType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "methodType",
    "typeString": "'instance' | 'static' | 'abstract'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasMethod.visibility",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "visibility",
    "typeString": "'public' | 'protected' | 'private'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasMethod.isGetter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGetter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasMethod.isSetter",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isSetter",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasMethod.isOverride",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOverride",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:HasParameter",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "HasParameter",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Function or method has a parameter\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasParameter.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'HAS_PARAMETER'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasParameter.index",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "index",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasParameter.isOptional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOptional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasParameter.isRest",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isRest",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasParameter.hasDefaultValue",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefaultValue",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:HasParameter.isDestructured",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDestructured",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:InterfaceHasProperty",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "InterfaceHasProperty",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Class has a property\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceHasProperty.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'HAS_PROPERTY'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceHasProperty.index",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "index",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:InterfaceHasProperty.isOptional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOptional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ReferencesType",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReferencesType",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity references a type\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REFERENCES_TYPE'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.referenceType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referenceType",
    "typeString": "'parameter' | 'return' | 'property' | 'variable' | 'typeAlias' | 'generic'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.isArray",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isArray",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.isUnion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isUnion",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.isIntersection",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isIntersection",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.isGeneric",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGeneric",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesType.typeArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ReferencesVariable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ReferencesVariable",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity references a variable\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesVariable.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REFERENCES_VARIABLE'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesVariable.referenceType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referenceType",
    "typeString": "'read' | 'write' | 'readwrite'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesVariable.referenceCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referenceCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesVariable.referenceLocationLines",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referenceLocationLines",
    "typeString": "number[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ReferencesVariable.referenceLocationColumns",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "referenceLocationColumns",
    "typeString": "number[]",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:DependsOn",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "DependsOn",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity depends on another entity\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DependsOn.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'DEPENDS_ON'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DependsOn.dependencyType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "dependencyType",
    "typeString": "'import' | 'call' | 'reference' | 'extend' | 'implement'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DependsOn.isStrong",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isStrong",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DependsOn.isWeak",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isWeak",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DependsOn.weight",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "weight",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:IsDecoratedBy",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "IsDecoratedBy",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is decorated by a decorator\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IsDecoratedBy.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IS_DECORATED_BY'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IsDecoratedBy.decoratorName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "decoratorName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IsDecoratedBy.decoratorArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "decoratorArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IsDecoratedBy.targetType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "targetType",
    "typeString": "'class' | 'method' | 'property' | 'parameter'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Tests",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Tests",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is a test for another entity\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Tests.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'TESTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Tests.testType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "testType",
    "typeString": "'unit' | 'integration' | 'e2e'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Tests.framework",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "framework",
    "typeString": "'jest' | 'mocha' | 'jasmine' | 'other'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Tests.assertionCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "assertionCount",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Renders",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Renders",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is a component that renders another component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Renders.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'RENDERS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Renders.renderCount",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "renderCount",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Renders.renderLocationLines",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "renderLocationLines",
    "typeString": "number[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Renders.renderLocationColumns",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "renderLocationColumns",
    "typeString": "number[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Renders.isConditional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isConditional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Renders.props",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "props",
    "typeString": "Record<string, string>",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:UsesHook",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "UsesHook",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity is a component that uses a hook\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesHook.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'USES_HOOK'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesHook.hookName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hookName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesHook.hookArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hookArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesHook.isCustomHook",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isCustomHook",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ASTParentChild",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ASTParentChild",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents AST parent-child relationship\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ASTParentChild.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'AST_PARENT_CHILD'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ASTParentChild.childIndex",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "childIndex",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ASTParentChild.nodeKind",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeKind",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ASTParentChild.isStatement",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isStatement",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ASTParentChild.isExpression",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExpression",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ASTParentChild.isDeclaration",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDeclaration",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Suggests",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Suggests",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Entity suggests a hypothesis about code\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Suggests.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'SUGGESTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Suggests.confidence",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "confidence",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Suggests.reasoning",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "reasoning",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:BasedOn",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "BasedOn",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Metacognitive entity is based on code elements\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:BasedOn.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'BASED_ON'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:BasedOn.relevance",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "relevance",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:BasedOn.context",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "context",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:LeadsTo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "LeadsTo",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Insight leads to a decision\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:LeadsTo.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'LEADS_TO'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:LeadsTo.strength",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "strength",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:LeadsTo.reasoning",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "reasoning",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Answers",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Answers",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Insight answers a question\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Answers.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'ANSWERS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Answers.completeness",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "completeness",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Answers.explanation",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "explanation",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Contradicts",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Contradicts",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Hypothesis contradicts another hypothesis\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contradicts.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'CONTRADICTS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contradicts.degree",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "degree",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Contradicts.explanation",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "explanation",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Refines",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Refines",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Reflection refines another reflection\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Refines.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REFINES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Refines.improvement",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "improvement",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Refines.aspect",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "aspect",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Identifies",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Identifies",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Reflection identifies a pattern\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Identifies.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IDENTIFIES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Identifies.confidence",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "confidence",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Identifies.reasoning",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "reasoning",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:EvolvesTo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "EvolvesTo",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Metacognitive entity evolves to another metacognitive entity\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:EvolvesTo.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'EVOLVES_TO'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:EvolvesTo.evolutionType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "evolutionType",
    "typeString": "'refinement' | 'pivot' | 'expansion' | 'contradiction'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:EvolvesTo.reasoning",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "reasoning",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:AppliesTo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "AppliesTo",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Pattern applies to code elements\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:AppliesTo.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'APPLIES_TO'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:AppliesTo.strength",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "strength",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:AppliesTo.explanation",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "explanation",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Implements.completeness",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "completeness",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Implements.notes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "notes",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Addresses",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Addresses",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task addresses a hypothesis\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Addresses.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'ADDRESSES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Addresses.approach",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "approach",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Addresses.notes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "notes",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Resolves",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Resolves",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task resolves a question\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Resolves.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'RESOLVES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Resolves.completeness",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "completeness",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Resolves.notes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "notes",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Applies",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Applies",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task applies an insight\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Applies.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'APPLIES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Applies.approach",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "approach",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Applies.notes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "notes",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:Modifies",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Modifies",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task modifies code elements\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Modifies.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'MODIFIES'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Modifies.changeType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "changeType",
    "typeString": "'add' | 'update' | 'delete' | 'refactor'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:Modifies.notes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "notes",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:TaskDependsOn",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TaskDependsOn",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task depends on another task\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:TaskDependsOn.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'TASK_DEPENDS_ON'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:TaskDependsOn.dependencyType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "dependencyType",
    "typeString": "'hard' | 'soft'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:TaskDependsOn.notes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "notes",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:TaskBlockedBy",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TaskBlockedBy",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task is blocked by another task\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:TaskBlockedBy.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'TASK_BLOCKED_BY'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:TaskBlockedBy.severity",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "severity",
    "typeString": "'partial' | 'complete'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:TaskBlockedBy.reason",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "reason",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:DecomposesTo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "DecomposesTo",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Task decomposes to subtasks\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DecomposesTo.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'DECOMPOSES_TO'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ExecutedBy",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ExecutedBy",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Work item is executed by an agent\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ExecutedBy.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'EXECUTED_BY'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:VerifiedBy",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "VerifiedBy",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Work product is verified by a validation method\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:VerifiedBy.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'VERIFIED_BY'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ComponentRenders",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ComponentRenders",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Component renders another component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ComponentRenders.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'RENDERS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ComponentRenders.isConditional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isConditional",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ComponentRenders.isLoop",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isLoop",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ComponentRenders.key",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "key",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ProvidesProps",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ProvidesProps",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Component provides props to another component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ProvidesProps.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'PROVIDES_PROPS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ProvidesProps.props",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "props",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ProvidesProps.bindings",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "bindings",
    "typeString": "Record<string, string>",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ListensTo",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ListensTo",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Component listens to events from another component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ListensTo.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'LISTENS_TO'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ListensTo.events",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "events",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ListensTo.handlers",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "handlers",
    "typeString": "Record<string, string>",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:UsesSlot",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "UsesSlot",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Component uses a slot defined by another component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesSlot.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'USES_SLOT'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesSlot.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesSlot.isScoped",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isScoped",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesSlot.hasDefaultContent",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hasDefaultContent",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:DefinesVueComponent",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "DefinesVueComponent",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * File defines a Vue component\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:DefinesVueComponent.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'DEFINES_VUE_COMPONENT'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:UsesComposable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "UsesComposable",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Component uses a composable function\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesComposable.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'USES_COMPOSABLE'",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ImportsAuto",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsAuto",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Symbol is auto-imported\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 5,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsAuto.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPORTS_AUTO'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsAuto.symbol",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "symbol",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsAuto.source",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "source",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsAuto.isGlobal",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isGlobal",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsAuto.pluginName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "pluginName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:RegistersAuto",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "RegistersAuto",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Component is auto-registered\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:RegistersAuto.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'REGISTERS_AUTO'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:RegistersAuto.componentName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "componentName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:RegistersAuto.source",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "source",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:RegistersAuto.pluginName",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "pluginName",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:ImportsSass",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "ImportsSass",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Style imports a SASS module\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsSass.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'IMPORTS_SASS'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsSass.path",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "path",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsSass.isPartial",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isPartial",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:ImportsSass.namespace",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "namespace",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:UsesVariable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "UsesVariable",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Style uses a SASS variable\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesVariable.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'USES_VARIABLE'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesVariable.variable",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "variable",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesVariable.context",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "context",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:UsesVariable.isOverride",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isOverride",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/relationships.ts:IncludesMixin",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "IncludesMixin",
    "file": "src/schema/relationships.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Style includes a SASS mixin\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IncludesMixin.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "'INCLUDES_MIXIN'",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IncludesMixin.mixin",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "mixin",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/relationships.ts:IncludesMixin.parameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "parameters",
    "typeString": "Record<string, string>",
    "isOptional": true
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/schema/types.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/schema/types.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/schema/types.ts",
    "name": "types.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 136,
    "size": 4752,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:GraphEntity",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "GraphEntity",
    "file": "src/schema/types.ts",
    "startLine": 5,
    "endLine": 9,
    "description": "/**\n * Base interface for all graph entities (nodes and relationships)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:GraphEntity.nodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:GraphEntity.codebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "codebaseId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:Node",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Node",
    "file": "src/schema/types.ts",
    "startLine": 10,
    "endLine": 17,
    "description": "/**\n * Base interface for all node types\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 4,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Node.labels",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "labels",
    "typeString": "string[]",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Node.hash",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hash",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Node.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Node.updatedAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "updatedAt",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:Relationship",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Relationship",
    "file": "src/schema/types.ts",
    "startLine": 18,
    "endLine": 21,
    "description": "/**\n * Base interface for all relationship types\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 13,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.type",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "type",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.startNodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "startNodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.endNodeId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "endNodeId",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.hash",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "hash",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.createdAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "createdAt",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.updatedAt",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "updatedAt",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.isCrossCodebase",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isCrossCodebase",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.sourceCodebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceCodebaseId",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.targetCodebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "targetCodebaseId",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.unresolvedComponent",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "unresolvedComponent",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.unresolvedComposable",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "unresolvedComposable",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship.unresolvedImport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "unresolvedImport",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Relationship._schemaVersion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "_schemaVersion",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:CodeLocation",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "CodeLocation",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Location information for code elements\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.file",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "file",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.startLine",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "startLine",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.endLine",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "endLine",
    "typeString": "number",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.startColumn",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "startColumn",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.endColumn",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "endColumn",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.offset",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "offset",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeLocation.length",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "length",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:CodeElement",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "CodeElement",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Base interface for all code elements (functions, classes, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 6,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeElement.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeElement.documentation",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "documentation",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeElement.sourceCode",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceCode",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeElement.isExported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isExported",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeElement.isDefaultExport",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isDefaultExport",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:CodeElement.visibility",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "visibility",
    "typeString": "'public' | 'protected' | 'private'",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:NamedType",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "NamedType",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Base interface for all named types (classes, interfaces, etc.)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:NamedType.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:NamedType.typeParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeParameters",
    "typeString": "TypeParameter[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:NamedType.decorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "decorators",
    "typeString": "Decorator[]",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:Callable",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Callable",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Base interface for all callable elements (functions, methods)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 7,
    "extendsCount": 1,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.isAsync",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isAsync",
    "typeString": "boolean",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.description",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "description",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.returnType",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "returnType",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.typeParameters",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeParameters",
    "typeString": "TypeParameter[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.decorators",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "decorators",
    "typeString": "Decorator[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.complexity",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "complexity",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Callable.loc",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "loc",
    "typeString": "number",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:TypeParameter",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeParameter",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type parameter (generic)\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeParameter.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeParameter.constraint",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "constraint",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeParameter.default",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "default",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:Decorator",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Decorator",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a decorator\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Decorator.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Decorator.arguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "arguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Decorator.sourceCode",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceCode",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:TypeReference",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TypeReference",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Represents a type reference\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 14,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.name",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "name",
    "typeString": "string",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.typeArguments",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "typeArguments",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isArray",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isArray",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isUnion",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isUnion",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isIntersection",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isIntersection",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isLiteral",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isLiteral",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isTuple",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTuple",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isFunction",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isFunction",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isConditional",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isConditional",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isIndexed",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isIndexed",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isKeyof",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isKeyof",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isTypeof",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isTypeof",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.isImported",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "isImported",
    "typeString": "boolean",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:TypeReference.sourceModule",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "sourceModule",
    "typeString": "string",
    "isOptional": true
  },
  {
    "nodeId": "self:Interface:src/schema/types.ts:Neo4jMetadata",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "Neo4jMetadata",
    "file": "src/schema/types.ts",
    "startLine": 21,
    "endLine": 21,
    "description": "/**\n * Metadata for Neo4j indexing and querying\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 3,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Neo4jMetadata.indexProperties",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "indexProperties",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Neo4jMetadata.searchProperties",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "searchProperties",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:InterfaceProperty:src/schema/types.ts:Neo4jMetadata.queryHints",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "queryHints",
    "typeString": "string[]",
    "isOptional": true
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/transformer/graph-transformer.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/transformer/graph-transformer.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/transformer/graph-transformer.ts",
    "name": "graph-transformer.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 470,
    "size": 17470,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Interface:src/transformer/graph-transformer.ts:TransformResult",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "TransformResult",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 5,
    "endLine": 11,
    "description": "/**\n * Result of a graph transformation\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 2,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/transformer/graph-transformer.ts:TransformResult.nodes",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "nodes",
    "typeString": "Node[]",
    "description": "/**\n   * Nodes in the graph\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/transformer/graph-transformer.ts:TransformResult.relationships",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "relationships",
    "typeString": "Relationship[]",
    "description": "/**\n   * Relationships in the graph\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Interface:src/transformer/graph-transformer.ts:GraphTransformerConfig",
    "codebaseId": "self",
    "labels": [
      "Interface",
      "CodeElement"
    ],
    "name": "GraphTransformerConfig",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 12,
    "endLine": 17,
    "description": "/**\n * Configuration for the graph transformer\n */",
    "isGeneric": false,
    "methodCount": 0,
    "propertyCount": 1,
    "extendsCount": 0,
    "isExported": true,
    "isDefaultExport": false
  },
  {
    "nodeId": "self:InterfaceProperty:src/transformer/graph-transformer.ts:GraphTransformerConfig.codebaseId",
    "codebaseId": "self",
    "labels": [
      "InterfaceProperty"
    ],
    "type": "InterfaceProperty",
    "name": "codebaseId",
    "typeString": "string",
    "description": "/**\n   * Unique identifier for the codebase\n   */",
    "isOptional": false
  },
  {
    "nodeId": "self:Class:src/transformer/graph-transformer.ts:GraphTransformer",
    "codebaseId": "self",
    "labels": [
      "Class",
      "CodeElement"
    ],
    "name": "GraphTransformer",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 18,
    "endLine": 21,
    "isAbstract": false,
    "description": "/**\n * Transformer for converting parsed TypeScript data into a graph model\n */",
    "isGeneric": false,
    "hasConstructor": true,
    "methodCount": 8,
    "propertyCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Property:src/transformer/graph-transformer.ts:GraphTransformer.config",
    "codebaseId": "self",
    "labels": [
      "Property",
      "CodeElement"
    ],
    "name": "config",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 18,
    "endLine": 19,
    "isStatic": false,
    "visibility": "private",
    "typeString": "GraphTransformerConfig",
    "isReadonly": false,
    "isOptional": false,
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.transform",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "transform",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Transform parsed TypeScript data into a graph model\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:transform:parseResults",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "parseResults",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "any[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:nodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Node[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:relationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "Relationship[]",
    "initializer": "[]"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:uniqueNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "uniqueNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.deduplicateNodes(nodes)"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:uniqueRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "uniqueRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.deduplicateRelationships(relationships)"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:enhancedRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "enhancedRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "[...relationships]"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:enhancedNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "enhancedNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "this.ensureNodeLabels(uniqueNodes)"
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.deduplicateNodes",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "deduplicateNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Deduplicate nodes by nodeId\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:deduplicateNodes:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:nodeMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeMap",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, Node>()"
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.deduplicateRelationships",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "deduplicateRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Deduplicate relationships by nodeId\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:deduplicateRelationships:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:relationshipMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipMap",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, Relationship>()"
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.validate",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "validate",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "public",
    "description": "/**\n   * Validate the graph model\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:validate:result",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "result",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "TransformResult",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:invalidNodes",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "invalidNodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.nodes.filter(node => !this.isValidNode(node))"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:invalidRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "invalidRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.relationships.filter(rel => !this.isValidRelationship(rel))"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:nodeIds",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "nodeIds",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Set(result.nodes.map(node => node.nodeId))"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:filePathToNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "filePathToNodeId",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, string>()"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:filePath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "filePath",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "parts.length > 2 ? parts.slice(2).join(':') : ''"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:jsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "jsPath",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "filePath.replace(/\\.ts$/, '.js')"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:tsPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "tsPath",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "filePath.replace(/\\.js$/, '.ts')"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:builtInModules",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "builtInModules",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Set([\n      'path', 'fs', 'os', 'util', 'events', 'stream', 'http', 'https',\n      'net', 'crypto', 'child_process', 'buffer', 'url', 'querystring',\n      'assert', 'zlib', 'tty', 'dgram', 'dns', 'cluster', 'readline',\n      'string_decoder', 'timers', 'punycode', 'domain', 'process', 'v8',\n      'module', 'console', 'worker_threads', 'perf_hooks', 'async_hooks',\n      'vm', 'inspector', 'trace_events', 'wasi', 'repl', 'sys'\n    ])"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:danglingRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "danglingRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "result.relationships.filter(rel => {\n      // Skip validation for all IMPORTS_FROM_PACKAGE relationships\n      if (rel.type === 'IMPORTS_FROM_PACKAGE') {\n        return false;\n      }\n      \n      // Skip validation for EXPORTS_LOCAL relationships with endNodeId 'local'\n      if (rel.type === 'EXPORTS_LOCAL' && rel.endNodeId === 'local') {\n        return false;\n      }\n      \n      // Skip validation for EXTENDS and IMPLEMENTS relationships that reference types by name\n      if ((rel.type === 'EXTENDS' || rel.type === 'IMPLEMENTS' || rel.type === 'INTERFACE_EXTENDS') &&\n          (typeof rel.endNodeId === 'string' && !rel.endNodeId.startsWith(`${rel.codebaseId}:`))) {\n        return false;\n      }\n      \n      // Skip validation for REFERENCES_VARIABLE and REFERENCES_TYPE relationships\n      // These might reference global variables or types from external libraries\n      if (rel.type === 'REFERENCES_VARIABLE' || rel.type === 'REFERENCES_TYPE') {\n        // For simplicity, we'll skip validation for all REFERENCES_VARIABLE and REFERENCES_TYPE relationships\n        // This is because they might reference variables or types from external libraries,\n        // or variables that are not explicitly declared in the codebase (like globals)\n        return false;\n      }\n      \n      // Skip validation for DEPENDS_ON relationships derived from other relationships\n      if (rel.type === 'DEPENDS_ON') {\n        return false;\n      }\n      \n      // Handle relationships with unresolved references\n      if (rel.unresolvedComponent || rel.unresolvedComposable || rel.unresolvedImport) {\n        console.log(`Skipping validation for unresolved reference: ${rel.type} ${rel.nodeId}`);\n        return false;\n      }\n      \n      // Skip validation for IMPORTS relationships that reference directories or non-code files\n      if (rel.type === 'IMPORTS' &&\n          typeof rel.endNodeId === 'string') {\n        \n        // Skip if not a node ID format (doesn't start with codebaseId)\n        if (!rel.endNodeId.startsWith(`${rel.codebaseId}:`)) {\n          return false;\n        }\n        \n        // Get the file path from the node ID (skip codebaseId and type)\n        const parts = rel.endNodeId.split(':');\n        const filePath = parts.length > 2 ? parts.slice(2).join(':') : '';\n        \n        // Skip if no file extension (likely a directory)\n        if (!path.extname(filePath)) {\n          return false;\n        }\n        \n        // Check if the path exists as a directory\n        try {\n          if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n            return false;\n          }\n        } catch (e) {\n          // Ignore errors\n        }\n        \n        // Skip if JSON or other non-code files\n        const ext = path.extname(filePath).toLowerCase();\n        if (['.json', '.css', '.scss', '.less', '.svg', '.png', '.jpg', '.jpeg', '.gif'].includes(ext)) {\n          return false;\n        }\n        \n        // Handle directory imports that were resolved to .ts files\n        // Use type assertion since importPath is not in the base Relationship type\n        const importRel = rel as any;\n        if (ext === '.ts' && importRel.importPath && !importRel.importPath.endsWith('.ts')) {\n          const importPath = importRel.importPath;\n          if (importPath.startsWith('.') && !importPath.includes('.')) {\n            // This is likely a directory import\n            return false;\n          }\n        }\n      }\n      \n      // Check if start node exists\n      const startNodeExists = nodeIds.has(rel.startNodeId);\n      \n      // Check if end node exists, with flexible extension matching for File nodes\n      let endNodeExists = nodeIds.has(rel.endNodeId);\n      \n      // If end node doesn't exist directly, try flexible matching for File nodes\n      if (!endNodeExists && rel.endNodeId.includes(':File:')) {\n        const parts = rel.endNodeId.split(':');\n        const filePath = parts.length > 2 ? parts.slice(2).join(':') : ''; // Remove 'codebaseId:File:' prefix\n        const mappedNodeId = filePathToNodeId.get(filePath);\n        endNodeExists = !!mappedNodeId;\n        \n        // Update the relationship's endNodeId to use the correct node ID\n        if (endNodeExists && mappedNodeId) {\n          rel.endNodeId = mappedNodeId;\n        }\n      }\n      \n      return !startNodeExists || !endNodeExists;\n    })"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:parts",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parts",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rel.endNodeId.split(':')"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:ext",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "ext",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "path.extname(filePath).toLowerCase()"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:importRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importRel",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rel as any"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:importPath",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "importPath",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "importRel.importPath"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:startNodeExists",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "startNodeExists",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodeIds.has(rel.startNodeId)"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:endNodeExists",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "endNodeExists",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": false,
    "scope": "block",
    "initializer": "nodeIds.has(rel.endNodeId)"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:mappedNodeId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "mappedNodeId",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "filePathToNodeId.get(filePath)"
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.isValidNode",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isValidNode",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a node is valid\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:isValidNode:node",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "node",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.ensureNodeLabels",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "ensureNodeLabels",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Ensure nodes have appropriate labels based on their interfaces\n   * This is crucial for Neo4j schema alignment\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:ensureNodeLabels:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:enhancedNode",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "enhancedNode",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "{ ...node }"
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.isValidRelationship",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "isValidRelationship",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Check if a relationship is valid\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 1,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:isValidRelationship:relationship",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationship",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Method:src/transformer/graph-transformer.ts:GraphTransformer.deriveAdditionalRelationships",
    "codebaseId": "self",
    "labels": [
      "Method",
      "CodeElement"
    ],
    "name": "deriveAdditionalRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "isStatic": false,
    "visibility": "private",
    "description": "/**\n   * Derive additional semantic relationships from existing relationships\n   * This is where we can add higher-level relationships based on the lower-level ones\n   */",
    "isAbstract": false,
    "isGenerator": false,
    "isGetter": false,
    "isSetter": false,
    "parameterCount": 2,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:deriveAdditionalRelationships:relationships",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "relationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "Relationship[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/transformer/graph-transformer.ts:deriveAdditionalRelationships:nodes",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodes",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "Node[]",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:relationshipsByType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relationshipsByType",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, Relationship[]>()"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:relType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "relType",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "rel.type"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:callsRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "callsRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationshipsByType.get('CALLS') || []"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:dependsOnMap",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependsOnMap",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "new Map<string, Relationship>()"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:dependsOnId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependsOnId",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "`${this.config.codebaseId}:DEPENDS_ON:${refRel.startNodeId}->${refRel.endNodeId}`"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:dependsOnRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "dependsOnRel",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "typeString": "DependsOn",
    "initializer": "{\n            nodeId: dependsOnId,\n            codebaseId: this.config.codebaseId,\n            type: 'DEPENDS_ON',\n            startNodeId: refRel.startNodeId,\n            endNodeId: refRel.endNodeId,\n            dependencyType: 'reference',\n            isStrong: false,\n            isWeak: true,\n            weight: 1\n          }"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:existingRel",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "existingRel",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "dependsOnMap.get(dependsOnId)"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:referencesTypeRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referencesTypeRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationshipsByType.get('REFERENCES_TYPE') || []"
  },
  {
    "nodeId": "self:Variable:src/transformer/graph-transformer.ts:referencesVarRelationships",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "referencesVarRelationships",
    "file": "src/transformer/graph-transformer.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "relationshipsByType.get('REFERENCES_VARIABLE') || []"
  },
  {
    "nodeId": "self:File:/Users/zach/Dev/SAGE/cli/src/utils/id-generator.ts",
    "codebaseId": "self",
    "labels": [
      "File"
    ],
    "path": "src/utils/id-generator.ts",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/src/utils/id-generator.ts",
    "name": "id-generator.ts",
    "extension": "ts",
    "language": "typescript",
    "lineCount": 66,
    "size": 2169,
    "hasDefaultExport": false,
    "hasNamedExports": false,
    "namedExports": [],
    "hasCommonJSExport": false,
    "importCount": 0,
    "exportCount": 0
  },
  {
    "nodeId": "self:Function:src/utils/id-generator.ts:generateNodeId",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "generateNodeId",
    "file": "src/utils/id-generator.ts",
    "startLine": 14,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Generate a codebase-aware node ID\n * \n * @param codebaseId - The unique identifier for the codebase\n * @param nodeType - The type of node (e.g., 'File', 'Class', 'Method')\n * @param uniqueIdentifier - A unique identifier for the node within its type (e.g., file path, class name)\n * @returns A codebase-aware node ID\n */",
    "parameterCount": 3,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:generateNodeId:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/utils/id-generator.ts",
    "startLine": 15,
    "endLine": 15,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:generateNodeId:nodeType",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodeType",
    "file": "src/utils/id-generator.ts",
    "startLine": 15,
    "endLine": 15,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:generateNodeId:uniqueIdentifier",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "uniqueIdentifier",
    "file": "src/utils/id-generator.ts",
    "startLine": 15,
    "endLine": 17,
    "index": 2,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/utils/id-generator.ts:sanitizedCodebaseId",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sanitizedCodebaseId",
    "file": "src/utils/id-generator.ts",
    "startLine": 18,
    "endLine": 19,
    "isConstant": true,
    "scope": "block",
    "initializer": "codebaseId.replace(/:/g, '_')"
  },
  {
    "nodeId": "self:Variable:src/utils/id-generator.ts:sanitizedNodeType",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sanitizedNodeType",
    "file": "src/utils/id-generator.ts",
    "startLine": 19,
    "endLine": 20,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodeType.replace(/:/g, '_')"
  },
  {
    "nodeId": "self:Variable:src/utils/id-generator.ts:sanitizedIdentifier",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "sanitizedIdentifier",
    "file": "src/utils/id-generator.ts",
    "startLine": 20,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "uniqueIdentifier.replace(/:/g, '_')"
  },
  {
    "nodeId": "self:Function:src/utils/id-generator.ts:extractCodebaseId",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "extractCodebaseId",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Extract codebase ID from a node ID\n * \n * @param nodeId - The node ID to extract from\n * @returns The codebase ID portion of the node ID\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:extractCodebaseId:nodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodeId",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Variable:src/utils/id-generator.ts:parts",
    "codebaseId": "self",
    "labels": [
      "Variable",
      "CodeElement"
    ],
    "name": "parts",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "isConstant": true,
    "scope": "block",
    "initializer": "nodeId.split(':')"
  },
  {
    "nodeId": "self:Function:src/utils/id-generator.ts:extractNodeType",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "extractNodeType",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Extract node type from a node ID\n * \n * @param nodeId - The node ID to extract from\n * @returns The node type portion of the node ID\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:extractNodeType:nodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodeId",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Function:src/utils/id-generator.ts:extractUniqueIdentifier",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "extractUniqueIdentifier",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Extract unique identifier from a node ID\n * \n * @param nodeId - The node ID to extract from\n * @returns The unique identifier portion of the node ID\n */",
    "parameterCount": 1,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:extractUniqueIdentifier:nodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodeId",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Function:src/utils/id-generator.ts:isNodeFromCodebase",
    "codebaseId": "self",
    "labels": [
      "Function",
      "CodeElement"
    ],
    "name": "isNodeFromCodebase",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "isAsync": false,
    "description": "/**\n * Check if a node ID belongs to a specific codebase\n * \n * @param nodeId - The node ID to check\n * @param codebaseId - The codebase ID to check against\n * @returns True if the node ID belongs to the specified codebase\n */",
    "parameterCount": 2,
    "isExported": true,
    "isDefaultExport": false,
    "isGenerator": false,
    "isArrowFunction": false,
    "isFunctionExpression": false,
    "hasRestParameter": false,
    "hasOptionalParameters": false,
    "hasTypeParameters": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:isNodeFromCodebase:nodeId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "nodeId",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 0,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:Parameter:src/utils/id-generator.ts:isNodeFromCodebase:codebaseId",
    "codebaseId": "self",
    "labels": [
      "Parameter",
      "CodeElement"
    ],
    "name": "codebaseId",
    "file": "src/utils/id-generator.ts",
    "startLine": 21,
    "endLine": 21,
    "index": 1,
    "isOptional": false,
    "isRest": false,
    "typeString": "string",
    "isParameterProperty": false,
    "hasDecorators": false
  },
  {
    "nodeId": "self:package:@sage/cli",
    "name": "@sage/cli",
    "path": "package.json",
    "absolutePath": "/Users/zach/Dev/SAGE/cli/package.json",
    "version": "1.0.0",
    "description": "A system that ingests TypeScript codebases into Neo4j graph representations",
    "author": "",
    "license": "MIT",
    "dependencies": {
      "@babel/parser": "^7.27.1",
      "@babel/traverse": "^7.27.1",
      "@babel/types": "^7.27.1",
      "@vue/compiler-dom": "^3.5.13",
      "@vue/compiler-sfc": "^3.5.13",
      "neo4j-driver": "^5.28.1",
      "postcss": "^8.5.3",
      "postcss-scss": "^4.0.9",
      "sass": "^1.87.0",
      "typescript": "^5.8.3"
    },
    "devDependencies": {
      "@types/jest": "^29.5.12",
      "@types/node": "^22.15.3",
      "jest": "^29.7.0",
      "ts-jest": "^29.1.2",
      "ts-node": "^10.9.2"
    },
    "peerDependencies": {},
    "isLocal": true,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@babel/parser",
    "name": "@babel/parser",
    "version": "^7.27.1",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@babel/parser",
    "name": "@babel/parser",
    "version": "^7.27.1",
    "path": "node_modules/@babel/parser",
    "absolutePath": "node_modules/@babel/parser",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@babel/traverse",
    "name": "@babel/traverse",
    "version": "^7.27.1",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@babel/traverse",
    "name": "@babel/traverse",
    "version": "^7.27.1",
    "path": "node_modules/@babel/traverse",
    "absolutePath": "node_modules/@babel/traverse",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@babel/types",
    "name": "@babel/types",
    "version": "^7.27.1",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@babel/types",
    "name": "@babel/types",
    "version": "^7.27.1",
    "path": "node_modules/@babel/types",
    "absolutePath": "node_modules/@babel/types",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@vue/compiler-dom",
    "name": "@vue/compiler-dom",
    "version": "^3.5.13",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@vue/compiler-dom",
    "name": "@vue/compiler-dom",
    "version": "^3.5.13",
    "path": "node_modules/@vue/compiler-dom",
    "absolutePath": "node_modules/@vue/compiler-dom",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@vue/compiler-sfc",
    "name": "@vue/compiler-sfc",
    "version": "^3.5.13",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@vue/compiler-sfc",
    "name": "@vue/compiler-sfc",
    "version": "^3.5.13",
    "path": "node_modules/@vue/compiler-sfc",
    "absolutePath": "node_modules/@vue/compiler-sfc",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:neo4j-driver",
    "name": "neo4j-driver",
    "version": "^5.28.1",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:neo4j-driver",
    "name": "neo4j-driver",
    "version": "^5.28.1",
    "path": "node_modules/neo4j-driver",
    "absolutePath": "node_modules/neo4j-driver",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:postcss",
    "name": "postcss",
    "version": "^8.5.3",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:postcss",
    "name": "postcss",
    "version": "^8.5.3",
    "path": "node_modules/postcss",
    "absolutePath": "node_modules/postcss",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:postcss-scss",
    "name": "postcss-scss",
    "version": "^4.0.9",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:postcss-scss",
    "name": "postcss-scss",
    "version": "^4.0.9",
    "path": "node_modules/postcss-scss",
    "absolutePath": "node_modules/postcss-scss",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:sass",
    "name": "sass",
    "version": "^1.87.0",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:sass",
    "name": "sass",
    "version": "^1.87.0",
    "path": "node_modules/sass",
    "absolutePath": "node_modules/sass",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:typescript",
    "name": "typescript",
    "version": "^5.8.3",
    "isDevDependency": false,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:typescript",
    "name": "typescript",
    "version": "^5.8.3",
    "path": "node_modules/typescript",
    "absolutePath": "node_modules/typescript",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@types/jest",
    "name": "@types/jest",
    "version": "^29.5.12",
    "isDevDependency": true,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@types/jest",
    "name": "@types/jest",
    "version": "^29.5.12",
    "path": "node_modules/@types/jest",
    "absolutePath": "node_modules/@types/jest",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:@types/node",
    "name": "@types/node",
    "version": "^22.15.3",
    "isDevDependency": true,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:@types/node",
    "name": "@types/node",
    "version": "^22.15.3",
    "path": "node_modules/@types/node",
    "absolutePath": "node_modules/@types/node",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:jest",
    "name": "jest",
    "version": "^29.7.0",
    "isDevDependency": true,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:jest",
    "name": "jest",
    "version": "^29.7.0",
    "path": "node_modules/jest",
    "absolutePath": "node_modules/jest",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:ts-jest",
    "name": "ts-jest",
    "version": "^29.1.2",
    "isDevDependency": true,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:ts-jest",
    "name": "ts-jest",
    "version": "^29.1.2",
    "path": "node_modules/ts-jest",
    "absolutePath": "node_modules/ts-jest",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self:dependency:ts-node",
    "name": "ts-node",
    "version": "^10.9.2",
    "isDevDependency": true,
    "isPeerDependency": false,
    "isOptionalDependency": false,
    "isDirectDependency": true,
    "isTransitiveDependency": false,
    "codebaseId": "self",
    "labels": [
      "Dependency",
      "Node",
      "Package"
    ]
  },
  {
    "nodeId": "self:Package:ts-node",
    "name": "ts-node",
    "version": "^10.9.2",
    "path": "node_modules/ts-node",
    "absolutePath": "node_modules/ts-node",
    "isLocal": false,
    "codebaseId": "self",
    "labels": [
      "Package",
      "Node"
    ]
  },
  {
    "nodeId": "self",
    "name": "self",
    "codebaseId": "self",
    "createdAt": "2025-05-03T01:08:47.569Z",
    "description": "Codebase from /Users/zach/Dev/SAGE/cli",
    "language": "typescript",
    "labels": [
      "Codebase",
      "Node"
    ]
  }
]